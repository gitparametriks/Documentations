import { MARKDOWN_EXTENSION_REGEX } from "../constants.js";
function appendSlashForFolders(obj) {
  return Object.fromEntries(
    Object.entries(obj).map(([key, value]) => {
      const isFolder = value && typeof value === "object" && value.type === "folder";
      return isFolder ? [`${key}/`, value] : [key, value];
    })
  );
}
function createCatchAllMeta(filePaths, customMeta = /* @__PURE__ */ Object.create(null)) {
  const metaMap = appendSlashForFolders(customMeta);
  const paths = filePaths.map(
    (filePath) => filePath.replace(MARKDOWN_EXTENSION_REGEX, "").split("/")
  );
  for (const path of paths) {
    addToMap(metaMap, path);
  }
  function addToMap(meta, path) {
    var _a;
    const isPage = path.length === 1;
    const [name, ...rest] = path;
    if (isPage) {
      meta[name] || (meta[name] = "");
      return;
    }
    meta[_a = `${name}/`] || (meta[_a] = {});
    const folder = meta[`${name}/`];
    folder.items || (folder.items = {});
    folder.type || (folder.type = "folder");
    if (Object.hasOwn(meta, name) && typeof folder.title === "string") {
      const metaItem = meta[name];
      if (typeof metaItem === "string") {
        meta[name] = folder.title;
      } else {
        metaItem.title = folder.title;
      }
    }
    addToMap(folder.items, rest);
  }
  return metaMap;
}
export {
  createCatchAllMeta
};
