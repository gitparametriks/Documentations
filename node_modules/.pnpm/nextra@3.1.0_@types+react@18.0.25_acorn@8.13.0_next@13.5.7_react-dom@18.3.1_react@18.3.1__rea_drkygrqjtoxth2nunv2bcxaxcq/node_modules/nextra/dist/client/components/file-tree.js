import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import cn from "clsx";
import { createContext, memo, useCallback, useContext, useState } from "react";
import { Button } from "./button.js";
const ctx = createContext(0);
function useIndent() {
  return useContext(ctx);
}
function Tree({ children }) {
  return /* @__PURE__ */ jsx(
    "div",
    {
      className: cn(
        "nextra-filetree _mt-6 _select-none _text-sm _text-gray-800 dark:_text-gray-300",
        "_not-prose"
        // for nextra-theme-blog
      ),
      children: /* @__PURE__ */ jsx("ul", { className: "_inline-block _rounded-lg _border _px-4 _py-2 _border-neutral-200/70 contrast-more:_border-neutral-400 dark:_border-primary-100/10 contrast-more:dark:_border-neutral-400", children })
    }
  );
}
function Ident() {
  const length = useIndent();
  return /* @__PURE__ */ jsx(Fragment, { children: Array.from({ length }, (_, i) => (
    // Text can shrink indent
    /* @__PURE__ */ jsx("span", { className: "_w-5 _shrink-0" }, i)
  )) });
}
const Folder = memo(
  ({ label, name, open, children, defaultOpen = false, onToggle }) => {
    const indent = useIndent();
    const [isOpen, setIsOpen] = useState(defaultOpen);
    const toggle = useCallback(() => {
      onToggle?.(!isOpen);
      setIsOpen(!isOpen);
    }, [isOpen, onToggle]);
    const isFolderOpen = open === void 0 ? isOpen : open;
    return /* @__PURE__ */ jsxs("li", { className: "_flex _list-none _flex-col", children: [
      /* @__PURE__ */ jsxs(
        Button,
        {
          onClick: toggle,
          title: name,
          className: ({ hover }) => cn("_inline-flex _items-center _py-1", hover && "_opacity-60"),
          children: [
            /* @__PURE__ */ jsx(Ident, {}),
            /* @__PURE__ */ jsx(
              "svg",
              {
                width: "1em",
                height: "1em",
                viewBox: "0 0 24 24",
                className: "_shrink-0",
                children: /* @__PURE__ */ jsx(
                  "path",
                  {
                    fill: "none",
                    stroke: "currentColor",
                    strokeLinecap: "round",
                    strokeLinejoin: "round",
                    strokeWidth: "2",
                    d: isFolderOpen ? "M5 19a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h4l2 2h4a2 2 0 0 1 2 2v1M5 19h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-2-2H9a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2Z" : "M3 7v10a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-6l-2-2H5a2 2 0 0 0-2 2Z"
                  }
                )
              }
            ),
            /* @__PURE__ */ jsx("span", { className: "_ml-1", children: label ?? name })
          ]
        }
      ),
      isFolderOpen && /* @__PURE__ */ jsx("ul", { children: /* @__PURE__ */ jsx(ctx.Provider, { value: indent + 1, children }) })
    ] });
  }
);
Folder.displayName = "Folder";
const File = memo(({ label, name, active }) => /* @__PURE__ */ jsx(
  "li",
  {
    className: cn(
      "_flex _list-none",
      active && "_text-primary-600 contrast-more:_underline"
    ),
    children: /* @__PURE__ */ jsxs("span", { className: "_inline-flex _cursor-default _items-center _py-1", children: [
      /* @__PURE__ */ jsx(Ident, {}),
      /* @__PURE__ */ jsx(
        "svg",
        {
          width: "1em",
          height: "1em",
          viewBox: "0 0 24 24",
          className: "_shrink-0",
          children: /* @__PURE__ */ jsx(
            "path",
            {
              fill: "none",
              stroke: "currentColor",
              strokeLinecap: "round",
              strokeLinejoin: "round",
              strokeWidth: "2",
              d: "M9 12h6m-6 4h6m2 5H7a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5.586a1 1 0 0 1 .707.293l5.414 5.414a1 1 0 0 1 .293.707V19a2 2 0 0 1-2 2Z"
            }
          )
        }
      ),
      /* @__PURE__ */ jsx("span", { className: "_ml-1", children: label ?? name })
    ] })
  }
));
File.displayName = "File";
const FileTree = Object.assign(Tree, { Folder, File });
export {
  FileTree
};
