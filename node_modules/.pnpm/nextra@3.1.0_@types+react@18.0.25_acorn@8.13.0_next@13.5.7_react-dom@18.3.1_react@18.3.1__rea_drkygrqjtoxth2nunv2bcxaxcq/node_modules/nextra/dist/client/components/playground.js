import { jsx } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { CrossCircledIcon } from "../icons/index.js";
import { Code } from "./code.js";
import { Pre } from "./pre.js";
import { evaluate } from "./remote-content.js";
function Playground({
  source,
  scope,
  components,
  fallback = null
}) {
  const [compiledSource, setCompiledSource] = useState("");
  const [error, setError] = useState();
  useEffect(() => {
    async function doCompile() {
      const { compileMdx } = await import("../../server/compile.js");
      try {
        const mdx = await compileMdx(source);
        setCompiledSource(mdx.result);
        setError(null);
      } catch (error2) {
        setError(error2);
      }
    }
    doCompile();
  }, [source]);
  if (error) {
    return /* @__PURE__ */ jsx("div", { className: "[&_svg]:_text-red-500", children: /* @__PURE__ */ jsx(
      Pre,
      {
        "data-filename": "Could not compile code",
        icon: CrossCircledIcon,
        className: "_whitespace-pre-wrap",
        children: /* @__PURE__ */ jsx(Code, { children: /* @__PURE__ */ jsx("span", { children: error instanceof Error ? `${error.name}: ${error.message}` : String(error) }) })
      }
    ) });
  }
  if (compiledSource) {
    const MDXContent = evaluate(compiledSource, scope).default;
    return /* @__PURE__ */ jsx(MDXContent, { components });
  }
  return fallback;
}
export {
  Playground
};
