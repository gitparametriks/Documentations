import { jsx } from "react/jsx-runtime";
import jsxDevRuntime from "react/jsx-dev-runtime";
import jsxRuntime from "react/jsx-runtime";
import { useData } from "../hooks/index.js";
import { useMDXComponents } from "../mdx.js";
const runtime = process.env.NODE_ENV === "production" ? jsxRuntime : jsxDevRuntime;
function evaluate(compiledSource, scope = {}) {
  const keys = Object.keys(scope);
  const values = Object.values(scope);
  const hydrateFn = Reflect.construct(Function, ["$", ...keys, compiledSource]);
  return hydrateFn({ useMDXComponents, ...runtime }, ...values);
}
function RemoteContent({
  scope,
  components
}) {
  const compiledSource = useData("__nextra_dynamic_mdx");
  if (!compiledSource) {
    throw new Error(
      "RemoteContent must be used together with the `buildDynamicMDX` API"
    );
  }
  const MDXContent = evaluate(compiledSource, scope).default;
  return /* @__PURE__ */ jsx(MDXContent, { components });
}
RemoteContent.useTOC = (props) => {
  const compiledSource = useData("__nextra_dynamic_mdx");
  const { useTOC } = evaluate(compiledSource);
  return useTOC(props);
};
export {
  RemoteContent,
  evaluate
};
