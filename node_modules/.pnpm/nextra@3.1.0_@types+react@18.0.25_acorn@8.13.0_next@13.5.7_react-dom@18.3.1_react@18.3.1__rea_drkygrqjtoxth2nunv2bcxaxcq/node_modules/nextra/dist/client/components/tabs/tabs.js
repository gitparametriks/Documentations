"use client";
import { jsx, jsxs } from "react/jsx-runtime";
import {
  Tab as HeadlessTab,
  TabGroup,
  TabList,
  TabPanel,
  TabPanels
} from "@headlessui/react";
import cn from "clsx";
import { useCallback, useEffect, useState } from "react";
function isTabObjectItem(item) {
  return !!item && typeof item === "object" && "label" in item;
}
function Tabs({
  items,
  selectedIndex: _selectedIndex,
  defaultIndex = 0,
  onChange,
  children,
  storageKey
}) {
  const [selectedIndex, setSelectedIndex] = useState(defaultIndex);
  useEffect(() => {
    if (_selectedIndex !== void 0) {
      setSelectedIndex(_selectedIndex);
    }
  }, [_selectedIndex]);
  useEffect(() => {
    if (!storageKey) {
      return;
    }
    function fn(event) {
      if (event.key === storageKey) {
        setSelectedIndex(Number(event.newValue));
      }
    }
    const index = Number(localStorage.getItem(storageKey));
    setSelectedIndex(Number.isNaN(index) ? 0 : index);
    window.addEventListener("storage", fn);
    return () => {
      window.removeEventListener("storage", fn);
    };
  }, []);
  const handleChange = useCallback((index) => {
    if (storageKey) {
      const newValue = String(index);
      localStorage.setItem(storageKey, newValue);
      window.dispatchEvent(
        new StorageEvent("storage", { key: storageKey, newValue })
      );
      return;
    }
    setSelectedIndex(index);
    onChange?.(index);
  }, []);
  return /* @__PURE__ */ jsxs(
    TabGroup,
    {
      selectedIndex,
      defaultIndex,
      onChange: handleChange,
      tabIndex: -1,
      children: [
        /* @__PURE__ */ jsx(
          TabList,
          {
            className: cn(
              "nextra-scrollbar _overflow-x-auto _overscroll-x-contain _overflow-y-hidden",
              "_mt-4 _flex _w-full _gap-2 _border-b _border-gray-200 _pb-px dark:_border-neutral-800",
              "nextra-focus"
            ),
            children: items.map((item, index) => /* @__PURE__ */ jsx(
              HeadlessTab,
              {
                disabled: isTabObjectItem(item) && item.disabled,
                className: ({ selected, disabled, hover, focus }) => cn(
                  focus && "nextra-focusable _ring-inset",
                  selected && "_outline-none",
                  "_whitespace-nowrap",
                  "_rounded-t _p-2 _font-medium _leading-5 _transition-colors",
                  "_-mb-0.5 _select-none _border-b-2",
                  selected ? "_border-current" : hover ? "_border-gray-200 dark:_border-neutral-800" : "_border-transparent",
                  selected ? "_text-primary-600" : disabled ? "_text-gray-400 dark:_text-neutral-600 _pointer-events-none" : hover ? "_text-black dark:_text-white" : "_text-gray-600 dark:_text-gray-200"
                ),
                children: isTabObjectItem(item) ? item.label : item
              },
              index
            ))
          }
        ),
        /* @__PURE__ */ jsx(TabPanels, { children })
      ]
    }
  );
}
function Tab({
  children,
  // For SEO display all the Panel in the DOM and set `display: none;` for those that are not selected
  unmount = false,
  ...props
}) {
  return /* @__PURE__ */ jsx(
    TabPanel,
    {
      ...props,
      unmount,
      className: ({ focus }) => cn("_rounded _mt-6", focus && "nextra-focusable"),
      children
    }
  );
}
export {
  Tab,
  Tabs
};
