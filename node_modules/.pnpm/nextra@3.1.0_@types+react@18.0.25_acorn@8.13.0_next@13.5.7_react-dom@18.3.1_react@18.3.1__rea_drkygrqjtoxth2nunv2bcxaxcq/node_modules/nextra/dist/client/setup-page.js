import { jsx } from "react/jsx-runtime";
import { NEXTRA_INTERNAL } from "../constants.js";
import { findFolder } from "../utils.js";
import { useRouter } from "./hooks/index.js";
import { DataProvider } from "./hooks/use-data.js";
import { useMDXComponents } from "./mdx.js";
function HOC_MDXWrapper(MDXContent, route, pageOpts, useTOC) {
  const __nextra_internal__ = globalThis[NEXTRA_INTERNAL];
  __nextra_internal__.route = route;
  __nextra_internal__.pageMap = pageOpts.pageMap;
  __nextra_internal__.context[route] = {
    Content: MDXContent,
    pageOpts,
    useTOC
  };
  return NextraLayout;
}
function NextraLayout({
  __nextra_pageMap = [],
  __nextra_dynamic_opts,
  ...props
}) {
  const __nextra_internal__ = globalThis[NEXTRA_INTERNAL];
  const { Layout, themeConfig } = __nextra_internal__;
  const { route, locale } = useRouter();
  const pageContext = __nextra_internal__.context[route];
  if (!pageContext) {
    throw new Error(
      `No content found for the "${route}" route. Please report it as a bug.`
    );
  }
  let { pageOpts, useTOC, Content } = pageContext;
  const isDynamicLocale = route.startsWith("/[");
  if (isDynamicLocale) {
    pageOpts.pageMap = __nextra_pageMap;
  } else {
    for (const { route: route2, children } of __nextra_pageMap) {
      const paths = route2.split("/").slice(locale ? 2 : 1);
      const folder = findFolder(pageOpts.pageMap, paths);
      folder.children = children;
    }
  }
  if (__nextra_dynamic_opts) {
    const { title, frontMatter } = __nextra_dynamic_opts;
    pageOpts = {
      ...pageOpts,
      title,
      frontMatter
    };
  }
  return /* @__PURE__ */ jsx(Layout, { themeConfig, pageOpts, pageProps: props, children: /* @__PURE__ */ jsx(DataProvider, { value: props, children: /* @__PURE__ */ jsx(MDXWrapper, { useTOC, children: /* @__PURE__ */ jsx(Content, { ...props }) }) }) });
}
function MDXWrapper({
  children,
  useTOC
}) {
  const { wrapper } = useMDXComponents();
  return /* @__PURE__ */ jsx(TOCWrapper, { useTOC, wrapper, children });
}
function TOCWrapper({
  children,
  useTOC,
  wrapper: Wrapper,
  ...props
}) {
  const toc = useTOC(props);
  return Wrapper ? /* @__PURE__ */ jsx(Wrapper, { toc, children }) : children;
}
export {
  HOC_MDXWrapper
};
