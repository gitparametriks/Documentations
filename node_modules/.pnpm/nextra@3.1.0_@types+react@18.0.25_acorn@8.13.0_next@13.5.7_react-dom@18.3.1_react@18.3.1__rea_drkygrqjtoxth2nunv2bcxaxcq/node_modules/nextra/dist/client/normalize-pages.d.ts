import { z } from 'zod';
import { p as pageThemeSchema, M as MdxFile, P as PageMapItem, d as displaySchema, m as menuItemSchema, F as Folder } from '../types-BhjhW0gX.js';
import 'mdast';
import 'next';
import 'react';
import '../constants.js';
import './lib/index.js';
import 'rehype-katex/lib';
import 'better-react-mathjax';
import 'rehype-pretty-code';

type PageTheme = z.infer<typeof pageThemeSchema>;
type Display = z.infer<typeof displaySchema>;
type IMenuItem = z.infer<typeof menuItemSchema>;
type FolderWithoutChildren = Omit<Folder, 'children'>;
type Item = (MdxFile | FolderWithoutChildren) & {
    title: string;
    type: string;
    children: Item[];
    display?: Display;
    withIndexPage?: boolean;
    theme?: PageTheme;
    isUnderCurrentDocsTree?: boolean;
};
type PageItem = (MdxFile | FolderWithoutChildren) & {
    title: string;
    type: string;
    href?: string;
    newWindow?: boolean;
    children?: PageItem[];
    firstChildRoute?: string;
    display?: Display;
    withIndexPage?: boolean;
    isUnderCurrentDocsTree?: boolean;
};
type MenuItem = (MdxFile | FolderWithoutChildren) & IMenuItem & {
    children?: PageItem[];
};
type DocsItem = (MdxFile | FolderWithoutChildren) & {
    title: string;
    type: string;
    children: DocsItem[];
    firstChildRoute?: string;
    withIndexPage?: boolean;
    isUnderCurrentDocsTree?: boolean;
};
type NormalizedResult = {
    activeType?: string;
    activeIndex: number;
    activeThemeContext: PageTheme;
    activePath: Item[];
    directories: Item[];
    flatDirectories: Item[];
    docsDirectories: DocsItem[];
    flatDocsDirectories: DocsItem[];
    topLevelNavbarItems: (PageItem | MenuItem)[];
};
declare function normalizePages({ list, route, docsRoot, underCurrentDocsRoot, pageThemeContext }: {
    list: PageMapItem[];
    route: string;
    docsRoot?: string;
    underCurrentDocsRoot?: boolean;
    pageThemeContext?: PageTheme;
}): NormalizedResult;

export { type Item, type MenuItem, type PageItem, type PageTheme, normalizePages };
