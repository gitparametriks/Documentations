import { ProcessorOptions } from '@mdx-js/mdx';
import { j as FrontMatter, R as ReadingTime, r as StructurizedData, L as LoaderOptions } from '../types-BhjhW0gX.js';
import 'mdast';
import 'next';
import 'react';
import 'zod';
import '../constants.js';
import './lib/index.js';
import 'rehype-katex/lib';
import 'better-react-mathjax';
import 'rehype-pretty-code';

type MdxOptions = LoaderOptions['mdxOptions'] & Pick<ProcessorOptions, 'jsx' | 'outputFormat'>;
type CompileMdxOptions = Pick<LoaderOptions, 'staticImage' | 'search' | 'defaultShowCopyCode' | 'readingTime' | 'latex' | 'codeHighlight'> & {
    mdxOptions?: MdxOptions;
    route?: string;
    locale?: string;
    filePath?: string;
    useCachedCompiler?: boolean;
    isPageImport?: boolean;
    isPageMapImport?: boolean;
};
declare function compileMdx(source: string, { staticImage, search, readingTime, latex, codeHighlight, defaultShowCopyCode, route, locale, mdxOptions, filePath, useCachedCompiler, isPageImport, isPageMapImport }?: CompileMdxOptions): Promise<{
    result: string;
    frontMatter: FrontMatter;
    title?: string;
    hasJsxInH1?: true;
    readingTime?: ReadingTime;
    searchIndexKey?: string;
    structurizedData?: StructurizedData;
}>;

export { compileMdx };
