import fs from "fs/promises";
async function fetchFilePathsFromGitHub({
  user,
  repo,
  branch,
  docsPath,
  outputPath
}) {
  async function fillNestedMeta(metaPaths) {
    const result2 = /* @__PURE__ */ Object.create(null);
    let index = 0;
    let metaPath;
    while (metaPath = metaPaths[index++]) {
      const response2 = await fetch(
        `https://raw.githubusercontent.com/${user}/${repo}/${branch}/${docsPath}${metaPath}`
      );
      const metaData = await response2.json();
      const dir = metaPath.split("/").slice(0, -1);
      if (dir.length === 0) {
        Object.assign(result2, metaData);
      } else if (dir.length === 1) {
        result2[dir[0]] = {
          type: "folder",
          items: metaData
        };
      } else {
        throw new Error("\u274C Not implemented for nested directories");
      }
    }
    return result2;
  }
  const url = `https://api.github.com/repos/${user}/${repo}/git/trees/${branch}?recursive=1`;
  const response = await fetch(url);
  const data = await response.json();
  if (data.message) {
    console.error(
      "\u274C GitHub API rate limit exceeded, skipping\u2026",
      JSON.stringify(data, null, 2)
    );
    process.exit(0);
  }
  const filePaths = data.tree.filter((item) => item.path.startsWith(docsPath)).map((item) => item.path.replace(docsPath, ""));
  const result = {
    user,
    repo,
    branch,
    docsPath,
    filePaths: filePaths.filter((filePath) => /\.mdx?$/.test(filePath)),
    nestedMeta: await fillNestedMeta(
      filePaths.filter((filePath) => filePath.endsWith("_meta.json"))
    )
  };
  const json = JSON.stringify(result, null, 2);
  await fs.writeFile(outputPath, json);
  console.log(`\u2705 Remote files from "${url}" saved!`);
}
export {
  fetchFilePathsFromGitHub
};
