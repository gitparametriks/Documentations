import { isValidElement } from "react";
import { z } from "zod";
function isFunction(value) {
  return typeof value === "function";
}
const fc = [isFunction, { message: "Must be React.FC" }];
function isReactNode(value) {
  return value == null || typeof value === "string" || isFunction(value) || isValidElement(value);
}
const reactNode = [
  isReactNode,
  { message: "Must be React.ReactNode or React.FC" }
];
const searchSchema = z.boolean().or(
  z.strictObject({
    /**
     * Whether to index code blocks
     * @default true
     */
    codeblocks: z.boolean(),
    /**
     * A filter function to filter out files from indexing, and return the
     * index file key, or null to skip indexing.
     * A site can have multiple indexes, by default they're separated by
     * locales as multiple index files.
     */
    indexKey: z.custom().optional()
  })
);
const mathJaxOptionsSchema = z.strictObject({
  /**
   * URL for MathJax. Defaults to `https://cdnjs.cloudflare.com`
   */
  src: z.string(),
  /**
   * MathJax config. See https://docs.mathjax.org/en/latest/options/index.html
   */
  config: z.custom()
}).deepPartial().optional();
const nextraConfigSchema = z.strictObject({
  themeConfig: z.string(),
  defaultShowCopyCode: z.boolean(),
  search: searchSchema,
  staticImage: z.boolean(),
  readingTime: z.boolean(),
  latex: z.union([
    z.boolean(),
    z.strictObject({
      renderer: z.literal("mathjax"),
      options: mathJaxOptionsSchema
    }),
    z.strictObject({
      renderer: z.literal("katex"),
      options: z.custom()
    })
  ]),
  codeHighlight: z.boolean(),
  /**
   * A function to modify the code of compiled MDX pages.
   * @experimental
   */
  transform: z.custom(),
  /**
   * A function to modify the `pageMap` passed to theme layouts.
   * @experimental
   */
  transformPageMap: z.custom(),
  mdxOptions: z.strictObject({
    rehypePlugins: z.custom(),
    remarkPlugins: z.custom(),
    recmaPlugins: z.custom(),
    format: z.enum(["detect", "mdx", "md"]),
    rehypePrettyCodeOptions: z.custom()
  }),
  autoImportThemeStyle: z.boolean()
}).deepPartial().extend({ theme: z.string() });
const pageThemeSchema = z.strictObject({
  breadcrumb: z.boolean(),
  collapsed: z.boolean(),
  footer: z.boolean(),
  layout: z.enum(["default", "full", "raw"]),
  navbar: z.boolean(),
  pagination: z.boolean(),
  sidebar: z.boolean(),
  timestamp: z.boolean(),
  toc: z.boolean(),
  typesetting: z.enum(["default", "article"]),
  topContent: z.custom(...reactNode),
  bottomContent: z.custom(...reactNode)
});
const displaySchema = z.enum(["normal", "hidden", "children"]);
const titleSchema = z.string();
const linkItemSchema = z.strictObject({
  href: z.string(),
  newWindow: z.boolean(),
  title: titleSchema
});
const menuItemSchema = z.strictObject({
  display: displaySchema.optional(),
  items: z.record(linkItemSchema.partial({ href: true, newWindow: true })),
  title: titleSchema,
  type: z.literal("menu")
});
const separatorItemSchema = z.strictObject({
  title: titleSchema.optional(),
  type: z.literal("separator")
});
const itemSchema = linkItemSchema.extend({
  display: displaySchema,
  theme: pageThemeSchema,
  title: titleSchema,
  type: z.enum(["page", "doc"])
}).deepPartial();
const metaSchema = z.string().or(menuItemSchema).or(separatorItemSchema).or(itemSchema);
export {
  displaySchema,
  fc,
  mathJaxOptionsSchema,
  menuItemSchema,
  metaSchema,
  nextraConfigSchema,
  pageThemeSchema,
  reactNode,
  searchSchema
};
