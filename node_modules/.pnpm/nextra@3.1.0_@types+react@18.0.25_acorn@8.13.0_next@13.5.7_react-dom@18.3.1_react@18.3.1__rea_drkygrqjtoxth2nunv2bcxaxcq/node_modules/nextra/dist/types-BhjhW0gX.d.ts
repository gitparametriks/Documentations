import { Heading as Heading$1 } from 'mdast';
import { NextConfig } from 'next';
import { ReactNode, FC } from 'react';
import { z } from 'zod';
import { NEXTRA_INTERNAL } from './constants.js';
import { PluggableList } from './lib/index.js';
import * as rehype_katex_lib from 'rehype-katex/lib';
import { MathJax3Config } from 'better-react-mathjax';
import { Options } from 'rehype-pretty-code';

declare function isFunction(value: unknown): boolean;
declare const fc: readonly [typeof isFunction, {
    readonly message: "Must be React.FC";
}];
declare function isReactNode(value: unknown): boolean;
declare const reactNode: readonly [typeof isReactNode, {
    readonly message: "Must be React.ReactNode or React.FC";
}];
declare const searchSchema: z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
    /**
     * Whether to index code blocks
     * @default true
     */
    codeblocks: z.ZodBoolean;
    /**
     * A filter function to filter out files from indexing, and return the
     * index file key, or null to skip indexing.
     * A site can have multiple indexes, by default they're separated by
     * locales as multiple index files.
     */
    indexKey: z.ZodOptional<z.ZodType<(filepath: string, route: string, locale?: string) => null | string, z.ZodTypeDef, (filepath: string, route: string, locale?: string) => null | string>>;
}, "strict", z.ZodTypeAny, {
    codeblocks: boolean;
    indexKey?: ((filepath: string, route: string, locale?: string) => null | string) | undefined;
}, {
    codeblocks: boolean;
    indexKey?: ((filepath: string, route: string, locale?: string) => null | string) | undefined;
}>]>;
type Transform = (result: string, options: {
    route: string;
}) => string | Promise<string>;
declare const mathJaxOptionsSchema: z.ZodOptional<z.ZodObject<{
    src: z.ZodOptional<z.ZodString>;
    config: z.ZodOptional<z.ZodType<MathJax3Config, z.ZodTypeDef, MathJax3Config>>;
}, "strict", z.ZodTypeAny, {
    src?: string | undefined;
    config?: MathJax3Config | undefined;
}, {
    src?: string | undefined;
    config?: MathJax3Config | undefined;
}>>;
declare const nextraConfigSchema: z.ZodObject<z.objectUtil.extendShape<{
    themeConfig: z.ZodOptional<z.ZodString>;
    defaultShowCopyCode: z.ZodOptional<z.ZodBoolean>;
    search: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
        /**
         * Whether to index code blocks
         * @default true
         */
        codeblocks: z.ZodBoolean;
        /**
         * A filter function to filter out files from indexing, and return the
         * index file key, or null to skip indexing.
         * A site can have multiple indexes, by default they're separated by
         * locales as multiple index files.
         */
        indexKey: z.ZodOptional<z.ZodType<(filepath: string, route: string, locale?: string) => null | string, z.ZodTypeDef, (filepath: string, route: string, locale?: string) => null | string>>;
    }, "strict", z.ZodTypeAny, {
        codeblocks: boolean;
        indexKey?: ((filepath: string, route: string, locale?: string) => null | string) | undefined;
    }, {
        codeblocks: boolean;
        indexKey?: ((filepath: string, route: string, locale?: string) => null | string) | undefined;
    }>]>>;
    staticImage: z.ZodOptional<z.ZodBoolean>;
    readingTime: z.ZodOptional<z.ZodBoolean>;
    latex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
        renderer: z.ZodLiteral<"mathjax">;
        options: z.ZodOptional<z.ZodObject<{
            src: z.ZodOptional<z.ZodString>;
            config: z.ZodOptional<z.ZodType<MathJax3Config, z.ZodTypeDef, MathJax3Config>>;
        }, "strict", z.ZodTypeAny, {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        }, {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        }>>;
    }, "strict", z.ZodTypeAny, {
        renderer: "mathjax";
        options?: {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        } | undefined;
    }, {
        renderer: "mathjax";
        options?: {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        } | undefined;
    }>, z.ZodObject<{
        renderer: z.ZodLiteral<"katex">;
        options: z.ZodType<rehype_katex_lib.Options, z.ZodTypeDef, rehype_katex_lib.Options>;
    }, "strict", z.ZodTypeAny, {
        options: rehype_katex_lib.Options;
        renderer: "katex";
    }, {
        options: rehype_katex_lib.Options;
        renderer: "katex";
    }>]>>;
    codeHighlight: z.ZodOptional<z.ZodBoolean>;
    transform: z.ZodOptional<z.ZodType<Transform, z.ZodTypeDef, Transform>>;
    transformPageMap: z.ZodOptional<z.ZodType<(pageMap: PageMapItem[], locale: string) => PageMapItem[], z.ZodTypeDef, (pageMap: PageMapItem[], locale: string) => PageMapItem[]>>;
    mdxOptions: z.ZodOptional<z.ZodObject<{
        rehypePlugins: z.ZodOptional<z.ZodType<PluggableList | null | undefined, z.ZodTypeDef, PluggableList | null | undefined>>;
        remarkPlugins: z.ZodOptional<z.ZodType<PluggableList | null | undefined, z.ZodTypeDef, PluggableList | null | undefined>>;
        recmaPlugins: z.ZodOptional<z.ZodType<PluggableList | null | undefined, z.ZodTypeDef, PluggableList | null | undefined>>;
        format: z.ZodOptional<z.ZodEnum<["detect", "mdx", "md"]>>;
        rehypePrettyCodeOptions: z.ZodOptional<z.ZodType<Options, z.ZodTypeDef, Options>>;
    }, "strict", z.ZodTypeAny, {
        rehypePlugins?: PluggableList | null | undefined;
        remarkPlugins?: PluggableList | null | undefined;
        recmaPlugins?: PluggableList | null | undefined;
        format?: "detect" | "mdx" | "md" | undefined;
        rehypePrettyCodeOptions?: Options | undefined;
    }, {
        rehypePlugins?: PluggableList | null | undefined;
        remarkPlugins?: PluggableList | null | undefined;
        recmaPlugins?: PluggableList | null | undefined;
        format?: "detect" | "mdx" | "md" | undefined;
        rehypePrettyCodeOptions?: Options | undefined;
    }>>;
    autoImportThemeStyle: z.ZodOptional<z.ZodBoolean>;
}, {
    theme: z.ZodString;
}>, "strict", z.ZodTypeAny, {
    theme: string;
    themeConfig?: string | undefined;
    defaultShowCopyCode?: boolean | undefined;
    search?: boolean | {
        codeblocks: boolean;
        indexKey?: ((filepath: string, route: string, locale?: string) => null | string) | undefined;
    } | undefined;
    staticImage?: boolean | undefined;
    readingTime?: boolean | undefined;
    latex?: boolean | {
        renderer: "mathjax";
        options?: {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        } | undefined;
    } | {
        options: rehype_katex_lib.Options;
        renderer: "katex";
    } | undefined;
    codeHighlight?: boolean | undefined;
    transform?: Transform | undefined;
    transformPageMap?: ((pageMap: PageMapItem[], locale: string) => PageMapItem[]) | undefined;
    mdxOptions?: {
        rehypePlugins?: PluggableList | null | undefined;
        remarkPlugins?: PluggableList | null | undefined;
        recmaPlugins?: PluggableList | null | undefined;
        format?: "detect" | "mdx" | "md" | undefined;
        rehypePrettyCodeOptions?: Options | undefined;
    } | undefined;
    autoImportThemeStyle?: boolean | undefined;
}, {
    theme: string;
    themeConfig?: string | undefined;
    defaultShowCopyCode?: boolean | undefined;
    search?: boolean | {
        codeblocks: boolean;
        indexKey?: ((filepath: string, route: string, locale?: string) => null | string) | undefined;
    } | undefined;
    staticImage?: boolean | undefined;
    readingTime?: boolean | undefined;
    latex?: boolean | {
        renderer: "mathjax";
        options?: {
            src?: string | undefined;
            config?: MathJax3Config | undefined;
        } | undefined;
    } | {
        options: rehype_katex_lib.Options;
        renderer: "katex";
    } | undefined;
    codeHighlight?: boolean | undefined;
    transform?: Transform | undefined;
    transformPageMap?: ((pageMap: PageMapItem[], locale: string) => PageMapItem[]) | undefined;
    mdxOptions?: {
        rehypePlugins?: PluggableList | null | undefined;
        remarkPlugins?: PluggableList | null | undefined;
        recmaPlugins?: PluggableList | null | undefined;
        format?: "detect" | "mdx" | "md" | undefined;
        rehypePrettyCodeOptions?: Options | undefined;
    } | undefined;
    autoImportThemeStyle?: boolean | undefined;
}>;
declare const pageThemeSchema: z.ZodObject<{
    breadcrumb: z.ZodBoolean;
    collapsed: z.ZodBoolean;
    footer: z.ZodBoolean;
    layout: z.ZodEnum<["default", "full", "raw"]>;
    navbar: z.ZodBoolean;
    pagination: z.ZodBoolean;
    sidebar: z.ZodBoolean;
    timestamp: z.ZodBoolean;
    toc: z.ZodBoolean;
    typesetting: z.ZodEnum<["default", "article"]>;
    topContent: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
    bottomContent: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
}, "strict", z.ZodTypeAny, {
    breadcrumb: boolean;
    collapsed: boolean;
    footer: boolean;
    layout: "default" | "full" | "raw";
    navbar: boolean;
    pagination: boolean;
    sidebar: boolean;
    timestamp: boolean;
    toc: boolean;
    typesetting: "default" | "article";
    topContent?: ReactNode | FC;
    bottomContent?: ReactNode | FC;
}, {
    breadcrumb: boolean;
    collapsed: boolean;
    footer: boolean;
    layout: "default" | "full" | "raw";
    navbar: boolean;
    pagination: boolean;
    sidebar: boolean;
    timestamp: boolean;
    toc: boolean;
    typesetting: "default" | "article";
    topContent?: ReactNode | FC;
    bottomContent?: ReactNode | FC;
}>;
/**
 * An option to control how an item should be displayed in the sidebar:
 * - `normal`: the default behavior, item will be displayed
 * - `hidden`: the item will not be displayed in the sidebar entirely
 * - `children`: if the item is a folder, itself will be hidden but all its children will still be processed
 */
declare const displaySchema: z.ZodEnum<["normal", "hidden", "children"]>;
declare const menuItemSchema: z.ZodObject<{
    display: z.ZodOptional<z.ZodEnum<["normal", "hidden", "children"]>>;
    items: z.ZodRecord<z.ZodString, z.ZodObject<{
        href: z.ZodOptional<z.ZodString>;
        newWindow: z.ZodOptional<z.ZodBoolean>;
        title: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        title: string;
        href?: string | undefined;
        newWindow?: boolean | undefined;
    }, {
        title: string;
        href?: string | undefined;
        newWindow?: boolean | undefined;
    }>>;
    title: z.ZodString;
    type: z.ZodLiteral<"menu">;
}, "strict", z.ZodTypeAny, {
    type: "menu";
    title: string;
    items: Record<string, {
        title: string;
        href?: string | undefined;
        newWindow?: boolean | undefined;
    }>;
    display?: "children" | "normal" | "hidden" | undefined;
}, {
    type: "menu";
    title: string;
    items: Record<string, {
        title: string;
        href?: string | undefined;
        newWindow?: boolean | undefined;
    }>;
    display?: "children" | "normal" | "hidden" | undefined;
}>;
declare const metaSchema: z.ZodUnion<[z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodObject<{
    display: z.ZodOptional<z.ZodEnum<["normal", "hidden", "children"]>>;
    items: z.ZodRecord<z.ZodString, z.ZodObject<{
        href: z.ZodOptional<z.ZodString>;
        newWindow: z.ZodOptional<z.ZodBoolean>;
        title: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        title: string;
        href?: string | undefined;
        newWindow?: boolean | undefined;
    }, {
        title: string;
        href?: string | undefined;
        newWindow?: boolean | undefined;
    }>>;
    title: z.ZodString;
    type: z.ZodLiteral<"menu">;
}, "strict", z.ZodTypeAny, {
    type: "menu";
    title: string;
    items: Record<string, {
        title: string;
        href?: string | undefined;
        newWindow?: boolean | undefined;
    }>;
    display?: "children" | "normal" | "hidden" | undefined;
}, {
    type: "menu";
    title: string;
    items: Record<string, {
        title: string;
        href?: string | undefined;
        newWindow?: boolean | undefined;
    }>;
    display?: "children" | "normal" | "hidden" | undefined;
}>]>, z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    type: z.ZodLiteral<"separator">;
}, "strict", z.ZodTypeAny, {
    type: "separator";
    title?: string | undefined;
}, {
    type: "separator";
    title?: string | undefined;
}>]>, z.ZodObject<{
    href: z.ZodOptional<z.ZodString>;
    newWindow: z.ZodOptional<z.ZodBoolean>;
    display: z.ZodOptional<z.ZodEnum<["normal", "hidden", "children"]>>;
    theme: z.ZodOptional<z.ZodObject<{
        breadcrumb: z.ZodOptional<z.ZodBoolean>;
        collapsed: z.ZodOptional<z.ZodBoolean>;
        footer: z.ZodOptional<z.ZodBoolean>;
        layout: z.ZodOptional<z.ZodEnum<["default", "full", "raw"]>>;
        navbar: z.ZodOptional<z.ZodBoolean>;
        pagination: z.ZodOptional<z.ZodBoolean>;
        sidebar: z.ZodOptional<z.ZodBoolean>;
        timestamp: z.ZodOptional<z.ZodBoolean>;
        toc: z.ZodOptional<z.ZodBoolean>;
        typesetting: z.ZodOptional<z.ZodEnum<["default", "article"]>>;
        topContent: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        bottomContent: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
    }, "strict", z.ZodTypeAny, {
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | "raw" | undefined;
        navbar?: boolean | undefined;
        pagination?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
        topContent?: ReactNode | FC;
        bottomContent?: ReactNode | FC;
    }, {
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | "raw" | undefined;
        navbar?: boolean | undefined;
        pagination?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
        topContent?: ReactNode | FC;
        bottomContent?: ReactNode | FC;
    }>>;
    title: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodEnum<["page", "doc"]>>;
}, "strict", z.ZodTypeAny, {
    type?: "page" | "doc" | undefined;
    theme?: {
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | "raw" | undefined;
        navbar?: boolean | undefined;
        pagination?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
        topContent?: ReactNode | FC;
        bottomContent?: ReactNode | FC;
    } | undefined;
    href?: string | undefined;
    newWindow?: boolean | undefined;
    title?: string | undefined;
    display?: "children" | "normal" | "hidden" | undefined;
}, {
    type?: "page" | "doc" | undefined;
    theme?: {
        breadcrumb?: boolean | undefined;
        collapsed?: boolean | undefined;
        footer?: boolean | undefined;
        layout?: "default" | "full" | "raw" | undefined;
        navbar?: boolean | undefined;
        pagination?: boolean | undefined;
        sidebar?: boolean | undefined;
        timestamp?: boolean | undefined;
        toc?: boolean | undefined;
        typesetting?: "default" | "article" | undefined;
        topContent?: ReactNode | FC;
        bottomContent?: ReactNode | FC;
    } | undefined;
    href?: string | undefined;
    newWindow?: boolean | undefined;
    title?: string | undefined;
    display?: "children" | "normal" | "hidden" | undefined;
}>]>;

interface LoaderOptions extends NextraConfig {
    isPageImport?: boolean;
    isPageMapImport?: boolean;
    isMetaFile?: boolean;
    locales: string[];
}
interface Folder<FileType = PageMapItem> {
    name: string;
    route: string;
    children: FileType[];
}
type MetaJsonFile = {
    data: {
        [fileName: string]: Meta;
    };
};
type DynamicFolder = {
    type: 'folder';
    items: DynamicMeta;
    title?: string;
};
type DynamicMetaItem = Meta | DynamicFolder;
type DynamicMeta = Record<string, DynamicMetaItem>;
type DynamicMetaJsonFile = {
    data: DynamicMeta;
};
type FrontMatter = Record<string, any>;
type Meta = string | Record<string, any>;
type MdxFile<FrontMatterType = FrontMatter> = {
    name: string;
    route: string;
    frontMatter?: FrontMatterType;
};
type PageMapItem = Folder | MdxFile | MetaJsonFile;
type Page = (MdxFile | Folder<Page>) & {
    meta?: Exclude<Meta, string>;
};
type Heading = {
    depth: Exclude<Heading$1['depth'], 1>;
    value: string;
    id: string;
};
type PageOpts<FrontMatterType = FrontMatter> = {
    filePath: string;
    frontMatter: FrontMatterType;
    pageMap: PageMapItem[];
    title: string;
    hasJsxInH1?: boolean;
    timestamp?: number;
    readingTime?: ReadingTime;
};
type ReadingTime = {
    text: string;
    minutes: number;
    time: number;
    words: number;
};
type Search = z.infer<typeof searchSchema>;
type NextraConfig = z.infer<typeof nextraConfigSchema>;
type MathJaxOptions = z.infer<typeof mathJaxOptionsSchema>;
type Nextra = (nextraConfig: NextraConfig) => (nextConfig: NextConfig) => NextConfig;
type ThemeConfig = any | null;
type NextraThemeLayoutProps<TFrontMatter = FrontMatter, TThemeConfig = ThemeConfig> = {
    pageOpts: PageOpts<TFrontMatter>;
    pageProps: any;
    themeConfig: TThemeConfig;
    children: ReactNode;
};
type NextraMDXContent = FC<{
    toc: Heading[];
    children: ReactNode;
}>;
type UseTOC = (props: Record<string, any>) => Heading[];
type NextraInternalGlobal = typeof globalThis & {
    [NEXTRA_INTERNAL]: {
        pageMap: PageMapItem[];
        route: string;
        context: Record<string, {
            Content: NextraMDXContent;
            pageOpts: PageOpts;
            useTOC: UseTOC;
        }>;
        Layout: FC<NextraThemeLayoutProps>;
        themeConfig?: ThemeConfig;
    };
};
type DynamicMetaDescriptor = Record<string, () => any>;
type StructurizedData = Record<string, string>;
type SearchData = {
    [route: string]: {
        title: string;
        data: StructurizedData;
    };
};

export { type DynamicMeta as D, type Folder as F, type Heading as H, type LoaderOptions as L, type MdxFile as M, type NextraMDXContent as N, type PageMapItem as P, type ReadingTime as R, type Search as S, type ThemeConfig as T, type UseTOC as U, type Page as a, type PageOpts as b, type Meta as c, displaySchema as d, type MetaJsonFile as e, type Nextra as f, type DynamicFolder as g, type DynamicMetaItem as h, type DynamicMetaJsonFile as i, type FrontMatter as j, type NextraConfig as k, type MathJaxOptions as l, menuItemSchema as m, type NextraThemeLayoutProps as n, type NextraInternalGlobal as o, pageThemeSchema as p, type DynamicMetaDescriptor as q, type StructurizedData as r, type SearchData as s, fc as t, reactNode as u, searchSchema as v, mathJaxOptionsSchema as w, nextraConfigSchema as x, metaSchema as y };
