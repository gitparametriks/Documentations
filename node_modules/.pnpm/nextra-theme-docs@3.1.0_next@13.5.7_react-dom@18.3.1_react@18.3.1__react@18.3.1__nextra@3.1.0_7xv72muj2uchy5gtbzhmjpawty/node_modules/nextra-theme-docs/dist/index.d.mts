import { Heading, FrontMatter, PageOpts, NextraThemeLayoutProps } from 'nextra';
import * as react from 'react';
import { ReactElement, ReactNode, FC, Dispatch, SetStateAction, ComponentProps } from 'react';
import { z } from 'zod';
import { PageItem, MenuItem, normalizePages } from 'nextra/normalize-pages';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { MDXComponents } from 'nextra/mdx';
export { useTheme } from 'next-themes';

type NavBarProps = {
    items: (PageItem | MenuItem)[];
};
declare function Navbar({ items }: NavBarProps): ReactElement;

type TOCProps = {
    toc: Heading[];
    filePath: string;
};

declare const themeSchema: z.ZodObject<{
    banner: z.ZodObject<{
        content: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        dismissible: z.ZodBoolean;
        key: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        dismissible: boolean;
        key: string;
        content?: ReactNode | FC;
    }, {
        dismissible: boolean;
        key: string;
        content?: ReactNode | FC;
    }>;
    backgroundColor: z.ZodObject<{
        dark: z.ZodString;
        light: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        dark: string;
        light: string;
    }, {
        dark: string;
        light: string;
    }>;
    chat: z.ZodObject<{
        icon: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
        link: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        icon?: ReactNode | FC;
        link?: string | undefined;
    }, {
        icon?: ReactNode | FC;
        link?: string | undefined;
    }>;
    components: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<FC, z.ZodTypeDef, FC>>>;
    darkMode: z.ZodBoolean;
    direction: z.ZodEnum<["ltr", "rtl"]>;
    docsRepositoryBase: z.ZodString;
    editLink: z.ZodObject<{
        component: z.ZodUnion<[z.ZodType<FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }>, z.ZodTypeDef, FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }>>, z.ZodNull]>;
        content: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
    }, "strict", z.ZodTypeAny, {
        component: FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }> | null;
        content?: ReactNode | FC;
    }, {
        component: FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }> | null;
        content?: ReactNode | FC;
    }>;
    faviconGlyph: z.ZodOptional<z.ZodString>;
    feedback: z.ZodObject<{
        content: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
        labels: z.ZodString;
        useLink: z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        labels: string;
        useLink: (...args: unknown[]) => string;
        content?: ReactNode | FC;
    }, {
        labels: string;
        useLink: (...args: unknown[]) => string;
        content?: ReactNode | FC;
    }>;
    footer: z.ZodObject<{
        component: z.ZodType<ReactNode | FC<{
            menu: boolean;
        }>, z.ZodTypeDef, ReactNode | FC<{
            menu: boolean;
        }>>;
        content: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
    }, "strict", z.ZodTypeAny, {
        content?: ReactNode | FC;
        component?: ReactNode | FC<{
            menu: boolean;
        }>;
    }, {
        content?: ReactNode | FC;
        component?: ReactNode | FC<{
            menu: boolean;
        }>;
    }>;
    gitTimestamp: z.ZodType<ReactNode | FC<{
        timestamp: Date;
    }>, z.ZodTypeDef, ReactNode | FC<{
        timestamp: Date;
    }>>;
    head: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
    i18n: z.ZodArray<z.ZodObject<{
        direction: z.ZodOptional<z.ZodEnum<["ltr", "rtl"]>>;
        locale: z.ZodString;
        name: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        locale: string;
        name: string;
        direction?: "ltr" | "rtl" | undefined;
    }, {
        locale: string;
        name: string;
        direction?: "ltr" | "rtl" | undefined;
    }>, "many">;
    logo: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
    logoLink: z.ZodUnion<[z.ZodBoolean, z.ZodString]>;
    main: z.ZodOptional<z.ZodType<FC<{
        children: ReactNode;
    }>, z.ZodTypeDef, FC<{
        children: ReactNode;
    }>>>;
    navbar: z.ZodObject<{
        component: z.ZodType<ReactNode | FC<NavBarProps>, z.ZodTypeDef, ReactNode | FC<NavBarProps>>;
        extraContent: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
    }, "strict", z.ZodTypeAny, {
        component?: ReactNode | FC<NavBarProps>;
        extraContent?: ReactNode | FC;
    }, {
        component?: ReactNode | FC<NavBarProps>;
        extraContent?: ReactNode | FC;
    }>;
    navigation: z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
        next: z.ZodBoolean;
        prev: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        next: boolean;
        prev: boolean;
    }, {
        next: boolean;
        prev: boolean;
    }>]>;
    nextThemes: z.ZodObject<{
        defaultTheme: z.ZodString;
        forcedTheme: z.ZodOptional<z.ZodString>;
        storageKey: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        defaultTheme: string;
        storageKey: string;
        forcedTheme?: string | undefined;
    }, {
        defaultTheme: string;
        storageKey: string;
        forcedTheme?: string | undefined;
    }>;
    notFound: z.ZodObject<{
        content: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
        labels: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        labels: string;
        content?: ReactNode | FC;
    }, {
        labels: string;
        content?: ReactNode | FC;
    }>;
    color: z.ZodObject<{
        hue: z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            dark: z.ZodNumber;
            light: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            dark: number;
            light: number;
        }, {
            dark: number;
            light: number;
        }>]>;
        saturation: z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            dark: z.ZodNumber;
            light: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            dark: number;
            light: number;
        }, {
            dark: number;
            light: number;
        }>]>;
    }, "strict", z.ZodTypeAny, {
        hue: number | {
            dark: number;
            light: number;
        };
        saturation: number | {
            dark: number;
            light: number;
        };
    }, {
        hue: number | {
            dark: number;
            light: number;
        };
        saturation: number | {
            dark: number;
            light: number;
        };
    }>;
    project: z.ZodObject<{
        icon: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
        link: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        icon?: ReactNode | FC;
        link?: string | undefined;
    }, {
        icon?: ReactNode | FC;
        link?: string | undefined;
    }>;
    search: z.ZodObject<{
        component: z.ZodType<ReactNode | FC<{
            className?: string;
        }>, z.ZodTypeDef, ReactNode | FC<{
            className?: string;
        }>>;
        emptyResult: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
        error: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodString>]>;
        loading: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
        placeholder: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodString>]>;
    }, "strict", z.ZodTypeAny, {
        error: string | ((...args: unknown[]) => string);
        placeholder: string | ((...args: unknown[]) => string);
        component?: ReactNode | FC<{
            className?: string;
        }>;
        emptyResult?: ReactNode | FC;
        loading?: ReactNode | FC;
    }, {
        error: string | ((...args: unknown[]) => string);
        placeholder: string | ((...args: unknown[]) => string);
        component?: ReactNode | FC<{
            className?: string;
        }>;
        emptyResult?: ReactNode | FC;
        loading?: ReactNode | FC;
    }>;
    sidebar: z.ZodObject<{
        autoCollapse: z.ZodOptional<z.ZodBoolean>;
        defaultMenuCollapseLevel: z.ZodNumber;
        toggleButton: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        defaultMenuCollapseLevel: number;
        toggleButton: boolean;
        autoCollapse?: boolean | undefined;
    }, {
        defaultMenuCollapseLevel: number;
        toggleButton: boolean;
        autoCollapse?: boolean | undefined;
    }>;
    themeSwitch: z.ZodObject<{
        component: z.ZodType<ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>, z.ZodTypeDef, ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>>;
        useOptions: z.ZodUnion<[z.ZodObject<{
            light: z.ZodString;
            dark: z.ZodString;
            system: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            dark: string;
            light: string;
            system: string;
        }, {
            dark: string;
            light: string;
            system: string;
        }>, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodObject<{
            light: z.ZodString;
            dark: z.ZodString;
            system: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            dark: string;
            light: string;
            system: string;
        }, {
            dark: string;
            light: string;
            system: string;
        }>>]>;
    }, "strict", z.ZodTypeAny, {
        useOptions: {
            dark: string;
            light: string;
            system: string;
        } | ((...args: unknown[]) => {
            dark: string;
            light: string;
            system: string;
        });
        component?: ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>;
    }, {
        useOptions: {
            dark: string;
            light: string;
            system: string;
        } | ((...args: unknown[]) => {
            dark: string;
            light: string;
            system: string;
        });
        component?: ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>;
    }>;
    toc: z.ZodObject<{
        backToTop: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
        component: z.ZodType<ReactNode | FC<TOCProps>, z.ZodTypeDef, ReactNode | FC<TOCProps>>;
        extraContent: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
        float: z.ZodBoolean;
        title: z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>;
    }, "strict", z.ZodTypeAny, {
        float: boolean;
        component?: ReactNode | FC<TOCProps>;
        extraContent?: ReactNode | FC;
        backToTop?: ReactNode | FC;
        title?: ReactNode | FC;
    }, {
        float: boolean;
        component?: ReactNode | FC<TOCProps>;
        extraContent?: ReactNode | FC;
        backToTop?: ReactNode | FC;
        title?: ReactNode | FC;
    }>;
}, "strict", z.ZodTypeAny, {
    banner: {
        dismissible: boolean;
        key: string;
        content?: ReactNode | FC;
    };
    backgroundColor: {
        dark: string;
        light: string;
    };
    chat: {
        icon?: ReactNode | FC;
        link?: string | undefined;
    };
    darkMode: boolean;
    direction: "ltr" | "rtl";
    docsRepositoryBase: string;
    editLink: {
        component: FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }> | null;
        content?: ReactNode | FC;
    };
    feedback: {
        labels: string;
        useLink: (...args: unknown[]) => string;
        content?: ReactNode | FC;
    };
    footer: {
        content?: ReactNode | FC;
        component?: ReactNode | FC<{
            menu: boolean;
        }>;
    };
    i18n: {
        locale: string;
        name: string;
        direction?: "ltr" | "rtl" | undefined;
    }[];
    logoLink: string | boolean;
    navbar: {
        component?: ReactNode | FC<NavBarProps>;
        extraContent?: ReactNode | FC;
    };
    navigation: boolean | {
        next: boolean;
        prev: boolean;
    };
    nextThemes: {
        defaultTheme: string;
        storageKey: string;
        forcedTheme?: string | undefined;
    };
    notFound: {
        labels: string;
        content?: ReactNode | FC;
    };
    color: {
        hue: number | {
            dark: number;
            light: number;
        };
        saturation: number | {
            dark: number;
            light: number;
        };
    };
    project: {
        icon?: ReactNode | FC;
        link?: string | undefined;
    };
    search: {
        error: string | ((...args: unknown[]) => string);
        placeholder: string | ((...args: unknown[]) => string);
        component?: ReactNode | FC<{
            className?: string;
        }>;
        emptyResult?: ReactNode | FC;
        loading?: ReactNode | FC;
    };
    sidebar: {
        defaultMenuCollapseLevel: number;
        toggleButton: boolean;
        autoCollapse?: boolean | undefined;
    };
    themeSwitch: {
        useOptions: {
            dark: string;
            light: string;
            system: string;
        } | ((...args: unknown[]) => {
            dark: string;
            light: string;
            system: string;
        });
        component?: ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>;
    };
    toc: {
        float: boolean;
        component?: ReactNode | FC<TOCProps>;
        extraContent?: ReactNode | FC;
        backToTop?: ReactNode | FC;
        title?: ReactNode | FC;
    };
    components?: Record<string, FC> | undefined;
    faviconGlyph?: string | undefined;
    gitTimestamp?: ReactNode | FC<{
        timestamp: Date;
    }>;
    head?: ReactNode | FC;
    logo?: ReactNode | FC;
    main?: FC<{
        children: ReactNode;
    }> | undefined;
}, {
    banner: {
        dismissible: boolean;
        key: string;
        content?: ReactNode | FC;
    };
    backgroundColor: {
        dark: string;
        light: string;
    };
    chat: {
        icon?: ReactNode | FC;
        link?: string | undefined;
    };
    darkMode: boolean;
    direction: "ltr" | "rtl";
    docsRepositoryBase: string;
    editLink: {
        component: FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }> | null;
        content?: ReactNode | FC;
    };
    feedback: {
        labels: string;
        useLink: (...args: unknown[]) => string;
        content?: ReactNode | FC;
    };
    footer: {
        content?: ReactNode | FC;
        component?: ReactNode | FC<{
            menu: boolean;
        }>;
    };
    i18n: {
        locale: string;
        name: string;
        direction?: "ltr" | "rtl" | undefined;
    }[];
    logoLink: string | boolean;
    navbar: {
        component?: ReactNode | FC<NavBarProps>;
        extraContent?: ReactNode | FC;
    };
    navigation: boolean | {
        next: boolean;
        prev: boolean;
    };
    nextThemes: {
        defaultTheme: string;
        storageKey: string;
        forcedTheme?: string | undefined;
    };
    notFound: {
        labels: string;
        content?: ReactNode | FC;
    };
    color: {
        hue: number | {
            dark: number;
            light: number;
        };
        saturation: number | {
            dark: number;
            light: number;
        };
    };
    project: {
        icon?: ReactNode | FC;
        link?: string | undefined;
    };
    search: {
        error: string | ((...args: unknown[]) => string);
        placeholder: string | ((...args: unknown[]) => string);
        component?: ReactNode | FC<{
            className?: string;
        }>;
        emptyResult?: ReactNode | FC;
        loading?: ReactNode | FC;
    };
    sidebar: {
        defaultMenuCollapseLevel: number;
        toggleButton: boolean;
        autoCollapse?: boolean | undefined;
    };
    themeSwitch: {
        useOptions: {
            dark: string;
            light: string;
            system: string;
        } | ((...args: unknown[]) => {
            dark: string;
            light: string;
            system: string;
        });
        component?: ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>;
    };
    toc: {
        float: boolean;
        component?: ReactNode | FC<TOCProps>;
        extraContent?: ReactNode | FC;
        backToTop?: ReactNode | FC;
        title?: ReactNode | FC;
    };
    components?: Record<string, FC> | undefined;
    faviconGlyph?: string | undefined;
    gitTimestamp?: ReactNode | FC<{
        timestamp: Date;
    }>;
    head?: ReactNode | FC;
    logo?: ReactNode | FC;
    main?: FC<{
        children: ReactNode;
    }> | undefined;
}>;
declare const publicThemeSchema: z.ZodObject<z.objectUtil.extendShape<{
    banner: z.ZodOptional<z.ZodObject<{
        content: z.ZodOptional<z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>>;
        dismissible: z.ZodOptional<z.ZodBoolean>;
        key: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        content?: ReactNode | FC;
        dismissible?: boolean | undefined;
        key?: string | undefined;
    }, {
        content?: ReactNode | FC;
        dismissible?: boolean | undefined;
        key?: string | undefined;
    }>>;
    backgroundColor: z.ZodOptional<z.ZodObject<{
        dark: z.ZodOptional<z.ZodString>;
        light: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        dark?: string | undefined;
        light?: string | undefined;
    }, {
        dark?: string | undefined;
        light?: string | undefined;
    }>>;
    chat: z.ZodOptional<z.ZodObject<{
        icon: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        link: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    }, "strict", z.ZodTypeAny, {
        icon?: ReactNode | FC;
        link?: string | undefined;
    }, {
        icon?: ReactNode | FC;
        link?: string | undefined;
    }>>;
    components: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodType<FC, z.ZodTypeDef, FC>>>>;
    darkMode: z.ZodOptional<z.ZodBoolean>;
    direction: z.ZodOptional<z.ZodEnum<["ltr", "rtl"]>>;
    docsRepositoryBase: z.ZodOptional<z.ZodString>;
    editLink: z.ZodOptional<z.ZodObject<{
        component: z.ZodOptional<z.ZodUnion<[z.ZodType<FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }>, z.ZodTypeDef, FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }>>, z.ZodNull]>>;
        content: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
    }, "strict", z.ZodTypeAny, {
        content?: ReactNode | FC;
        component?: FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }> | null | undefined;
    }, {
        content?: ReactNode | FC;
        component?: FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }> | null | undefined;
    }>>;
    faviconGlyph: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    feedback: z.ZodOptional<z.ZodObject<{
        content: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        labels: z.ZodOptional<z.ZodString>;
        useLink: z.ZodOptional<z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodString>>;
    }, "strict", z.ZodTypeAny, {
        content?: ReactNode | FC;
        labels?: string | undefined;
        useLink?: ((...args: unknown[]) => string) | undefined;
    }, {
        content?: ReactNode | FC;
        labels?: string | undefined;
        useLink?: ((...args: unknown[]) => string) | undefined;
    }>>;
    footer: z.ZodOptional<z.ZodObject<{
        component: z.ZodOptional<z.ZodType<ReactNode | FC<{
            menu: boolean;
        }>, z.ZodTypeDef, ReactNode | FC<{
            menu: boolean;
        }>>>;
        content: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
    }, "strict", z.ZodTypeAny, {
        content?: ReactNode | FC;
        component?: ReactNode | FC<{
            menu: boolean;
        }>;
    }, {
        content?: ReactNode | FC;
        component?: ReactNode | FC<{
            menu: boolean;
        }>;
    }>>;
    gitTimestamp: z.ZodOptional<z.ZodType<ReactNode | FC<{
        timestamp: Date;
    }>, z.ZodTypeDef, ReactNode | FC<{
        timestamp: Date;
    }>>>;
    head: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
    i18n: z.ZodOptional<z.ZodArray<z.ZodObject<{
        direction: z.ZodOptional<z.ZodOptional<z.ZodEnum<["ltr", "rtl"]>>>;
        locale: z.ZodOptional<z.ZodString>;
        name: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        direction?: "ltr" | "rtl" | undefined;
        locale?: string | undefined;
        name?: string | undefined;
    }, {
        direction?: "ltr" | "rtl" | undefined;
        locale?: string | undefined;
        name?: string | undefined;
    }>, "many">>;
    logo: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
    logoLink: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    main: z.ZodOptional<z.ZodOptional<z.ZodType<FC<{
        children: ReactNode;
    }>, z.ZodTypeDef, FC<{
        children: ReactNode;
    }>>>>;
    navbar: z.ZodOptional<z.ZodObject<{
        component: z.ZodOptional<z.ZodType<ReactNode | FC<NavBarProps>, z.ZodTypeDef, ReactNode | FC<NavBarProps>>>;
        extraContent: z.ZodOptional<z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>>;
    }, "strict", z.ZodTypeAny, {
        component?: ReactNode | FC<NavBarProps>;
        extraContent?: ReactNode | FC;
    }, {
        component?: ReactNode | FC<NavBarProps>;
        extraContent?: ReactNode | FC;
    }>>;
    navigation: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodObject<{
        next: z.ZodBoolean;
        prev: z.ZodBoolean;
    }, "strict", z.ZodTypeAny, {
        next: boolean;
        prev: boolean;
    }, {
        next: boolean;
        prev: boolean;
    }>]>>;
    nextThemes: z.ZodOptional<z.ZodObject<{
        defaultTheme: z.ZodOptional<z.ZodString>;
        forcedTheme: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        storageKey: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        defaultTheme?: string | undefined;
        forcedTheme?: string | undefined;
        storageKey?: string | undefined;
    }, {
        defaultTheme?: string | undefined;
        forcedTheme?: string | undefined;
        storageKey?: string | undefined;
    }>>;
    notFound: z.ZodOptional<z.ZodObject<{
        content: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        labels: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        content?: ReactNode | FC;
        labels?: string | undefined;
    }, {
        content?: ReactNode | FC;
        labels?: string | undefined;
    }>>;
    color: z.ZodOptional<z.ZodObject<{
        hue: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            dark: z.ZodNumber;
            light: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            dark: number;
            light: number;
        }, {
            dark: number;
            light: number;
        }>]>>;
        saturation: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            dark: z.ZodNumber;
            light: z.ZodNumber;
        }, "strict", z.ZodTypeAny, {
            dark: number;
            light: number;
        }, {
            dark: number;
            light: number;
        }>]>>;
    }, "strict", z.ZodTypeAny, {
        hue?: number | {
            dark: number;
            light: number;
        } | undefined;
        saturation?: number | {
            dark: number;
            light: number;
        } | undefined;
    }, {
        hue?: number | {
            dark: number;
            light: number;
        } | undefined;
        saturation?: number | {
            dark: number;
            light: number;
        } | undefined;
    }>>;
    project: z.ZodOptional<z.ZodObject<{
        icon: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        link: z.ZodOptional<z.ZodOptional<z.ZodString>>;
    }, "strict", z.ZodTypeAny, {
        icon?: ReactNode | FC;
        link?: string | undefined;
    }, {
        icon?: ReactNode | FC;
        link?: string | undefined;
    }>>;
    search: z.ZodOptional<z.ZodObject<{
        component: z.ZodOptional<z.ZodType<ReactNode | FC<{
            className?: string;
        }>, z.ZodTypeDef, ReactNode | FC<{
            className?: string;
        }>>>;
        emptyResult: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        error: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodString>]>>;
        loading: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        placeholder: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodString>]>>;
    }, "strict", z.ZodTypeAny, {
        component?: ReactNode | FC<{
            className?: string;
        }>;
        emptyResult?: ReactNode | FC;
        error?: string | ((...args: unknown[]) => string) | undefined;
        loading?: ReactNode | FC;
        placeholder?: string | ((...args: unknown[]) => string) | undefined;
    }, {
        component?: ReactNode | FC<{
            className?: string;
        }>;
        emptyResult?: ReactNode | FC;
        error?: string | ((...args: unknown[]) => string) | undefined;
        loading?: ReactNode | FC;
        placeholder?: string | ((...args: unknown[]) => string) | undefined;
    }>>;
    sidebar: z.ZodOptional<z.ZodObject<{
        autoCollapse: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
        defaultMenuCollapseLevel: z.ZodOptional<z.ZodNumber>;
        toggleButton: z.ZodOptional<z.ZodBoolean>;
    }, "strict", z.ZodTypeAny, {
        autoCollapse?: boolean | undefined;
        defaultMenuCollapseLevel?: number | undefined;
        toggleButton?: boolean | undefined;
    }, {
        autoCollapse?: boolean | undefined;
        defaultMenuCollapseLevel?: number | undefined;
        toggleButton?: boolean | undefined;
    }>>;
    themeSwitch: z.ZodOptional<z.ZodObject<{
        component: z.ZodOptional<z.ZodType<ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>, z.ZodTypeDef, ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>>>;
        useOptions: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
            light: z.ZodString;
            dark: z.ZodString;
            system: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            dark: string;
            light: string;
            system: string;
        }, {
            dark: string;
            light: string;
            system: string;
        }>, z.ZodFunction<z.ZodTuple<[], z.ZodUnknown>, z.ZodObject<{
            light: z.ZodString;
            dark: z.ZodString;
            system: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            dark: string;
            light: string;
            system: string;
        }, {
            dark: string;
            light: string;
            system: string;
        }>>]>>;
    }, "strict", z.ZodTypeAny, {
        component?: ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>;
        useOptions?: {
            dark: string;
            light: string;
            system: string;
        } | ((...args: unknown[]) => {
            dark: string;
            light: string;
            system: string;
        }) | undefined;
    }, {
        component?: ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>;
        useOptions?: {
            dark: string;
            light: string;
            system: string;
        } | ((...args: unknown[]) => {
            dark: string;
            light: string;
            system: string;
        }) | undefined;
    }>>;
    toc: z.ZodOptional<z.ZodObject<{
        backToTop: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        component: z.ZodOptional<z.ZodType<ReactNode | FC<TOCProps>, z.ZodTypeDef, ReactNode | FC<TOCProps>>>;
        extraContent: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
        float: z.ZodOptional<z.ZodBoolean>;
        title: z.ZodOptional<z.ZodType<ReactNode | FC, z.ZodTypeDef, ReactNode | FC>>;
    }, "strict", z.ZodTypeAny, {
        float?: boolean | undefined;
        component?: ReactNode | FC<TOCProps>;
        extraContent?: ReactNode | FC;
        backToTop?: ReactNode | FC;
        title?: ReactNode | FC;
    }, {
        float?: boolean | undefined;
        component?: ReactNode | FC<TOCProps>;
        extraContent?: ReactNode | FC;
        backToTop?: ReactNode | FC;
        title?: ReactNode | FC;
    }>>;
}, {
    i18n: z.ZodOptional<z.ZodArray<z.ZodObject<{
        direction: z.ZodOptional<z.ZodEnum<["ltr", "rtl"]>>;
        locale: z.ZodString;
        name: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        locale: string;
        name: string;
        direction?: "ltr" | "rtl" | undefined;
    }, {
        locale: string;
        name: string;
        direction?: "ltr" | "rtl" | undefined;
    }>, "many">>;
}>, "strict", z.ZodTypeAny, {
    banner?: {
        content?: ReactNode | FC;
        dismissible?: boolean | undefined;
        key?: string | undefined;
    } | undefined;
    backgroundColor?: {
        dark?: string | undefined;
        light?: string | undefined;
    } | undefined;
    chat?: {
        icon?: ReactNode | FC;
        link?: string | undefined;
    } | undefined;
    components?: Record<string, FC> | undefined;
    darkMode?: boolean | undefined;
    direction?: "ltr" | "rtl" | undefined;
    docsRepositoryBase?: string | undefined;
    editLink?: {
        content?: ReactNode | FC;
        component?: FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }> | null | undefined;
    } | undefined;
    faviconGlyph?: string | undefined;
    feedback?: {
        content?: ReactNode | FC;
        labels?: string | undefined;
        useLink?: ((...args: unknown[]) => string) | undefined;
    } | undefined;
    footer?: {
        content?: ReactNode | FC;
        component?: ReactNode | FC<{
            menu: boolean;
        }>;
    } | undefined;
    gitTimestamp?: ReactNode | FC<{
        timestamp: Date;
    }>;
    head?: ReactNode | FC;
    i18n?: {
        locale: string;
        name: string;
        direction?: "ltr" | "rtl" | undefined;
    }[] | undefined;
    logo?: ReactNode | FC;
    logoLink?: string | boolean | undefined;
    main?: FC<{
        children: ReactNode;
    }> | undefined;
    navbar?: {
        component?: ReactNode | FC<NavBarProps>;
        extraContent?: ReactNode | FC;
    } | undefined;
    navigation?: boolean | {
        next: boolean;
        prev: boolean;
    } | undefined;
    nextThemes?: {
        defaultTheme?: string | undefined;
        forcedTheme?: string | undefined;
        storageKey?: string | undefined;
    } | undefined;
    notFound?: {
        content?: ReactNode | FC;
        labels?: string | undefined;
    } | undefined;
    color?: {
        hue?: number | {
            dark: number;
            light: number;
        } | undefined;
        saturation?: number | {
            dark: number;
            light: number;
        } | undefined;
    } | undefined;
    project?: {
        icon?: ReactNode | FC;
        link?: string | undefined;
    } | undefined;
    search?: {
        component?: ReactNode | FC<{
            className?: string;
        }>;
        emptyResult?: ReactNode | FC;
        error?: string | ((...args: unknown[]) => string) | undefined;
        loading?: ReactNode | FC;
        placeholder?: string | ((...args: unknown[]) => string) | undefined;
    } | undefined;
    sidebar?: {
        autoCollapse?: boolean | undefined;
        defaultMenuCollapseLevel?: number | undefined;
        toggleButton?: boolean | undefined;
    } | undefined;
    themeSwitch?: {
        component?: ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>;
        useOptions?: {
            dark: string;
            light: string;
            system: string;
        } | ((...args: unknown[]) => {
            dark: string;
            light: string;
            system: string;
        }) | undefined;
    } | undefined;
    toc?: {
        float?: boolean | undefined;
        component?: ReactNode | FC<TOCProps>;
        extraContent?: ReactNode | FC;
        backToTop?: ReactNode | FC;
        title?: ReactNode | FC;
    } | undefined;
}, {
    banner?: {
        content?: ReactNode | FC;
        dismissible?: boolean | undefined;
        key?: string | undefined;
    } | undefined;
    backgroundColor?: {
        dark?: string | undefined;
        light?: string | undefined;
    } | undefined;
    chat?: {
        icon?: ReactNode | FC;
        link?: string | undefined;
    } | undefined;
    components?: Record<string, FC> | undefined;
    darkMode?: boolean | undefined;
    direction?: "ltr" | "rtl" | undefined;
    docsRepositoryBase?: string | undefined;
    editLink?: {
        content?: ReactNode | FC;
        component?: FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }> | null | undefined;
    } | undefined;
    faviconGlyph?: string | undefined;
    feedback?: {
        content?: ReactNode | FC;
        labels?: string | undefined;
        useLink?: ((...args: unknown[]) => string) | undefined;
    } | undefined;
    footer?: {
        content?: ReactNode | FC;
        component?: ReactNode | FC<{
            menu: boolean;
        }>;
    } | undefined;
    gitTimestamp?: ReactNode | FC<{
        timestamp: Date;
    }>;
    head?: ReactNode | FC;
    i18n?: {
        locale: string;
        name: string;
        direction?: "ltr" | "rtl" | undefined;
    }[] | undefined;
    logo?: ReactNode | FC;
    logoLink?: string | boolean | undefined;
    main?: FC<{
        children: ReactNode;
    }> | undefined;
    navbar?: {
        component?: ReactNode | FC<NavBarProps>;
        extraContent?: ReactNode | FC;
    } | undefined;
    navigation?: boolean | {
        next: boolean;
        prev: boolean;
    } | undefined;
    nextThemes?: {
        defaultTheme?: string | undefined;
        forcedTheme?: string | undefined;
        storageKey?: string | undefined;
    } | undefined;
    notFound?: {
        content?: ReactNode | FC;
        labels?: string | undefined;
    } | undefined;
    color?: {
        hue?: number | {
            dark: number;
            light: number;
        } | undefined;
        saturation?: number | {
            dark: number;
            light: number;
        } | undefined;
    } | undefined;
    project?: {
        icon?: ReactNode | FC;
        link?: string | undefined;
    } | undefined;
    search?: {
        component?: ReactNode | FC<{
            className?: string;
        }>;
        emptyResult?: ReactNode | FC;
        error?: string | ((...args: unknown[]) => string) | undefined;
        loading?: ReactNode | FC;
        placeholder?: string | ((...args: unknown[]) => string) | undefined;
    } | undefined;
    sidebar?: {
        autoCollapse?: boolean | undefined;
        defaultMenuCollapseLevel?: number | undefined;
        toggleButton?: boolean | undefined;
    } | undefined;
    themeSwitch?: {
        component?: ReactNode | FC<{
            lite?: boolean;
            className?: string;
        }>;
        useOptions?: {
            dark: string;
            light: string;
            system: string;
        } | ((...args: unknown[]) => {
            dark: string;
            light: string;
            system: string;
        }) | undefined;
    } | undefined;
    toc?: {
        float?: boolean | undefined;
        component?: ReactNode | FC<TOCProps>;
        extraContent?: ReactNode | FC;
        backToTop?: ReactNode | FC;
        title?: ReactNode | FC;
    } | undefined;
}>;

type DocsThemeConfig = z.infer<typeof themeSchema>;
type PartialDocsThemeConfig = z.infer<typeof publicThemeSchema>;

type Config<FrontMatterType = FrontMatter> = Pick<PageOpts<FrontMatterType>, 'title' | 'frontMatter' | 'filePath' | 'timestamp'> & {
    hideSidebar: boolean;
    normalizePagesResult: ReturnType<typeof normalizePages>;
};
declare function useConfig<FrontMatterType = FrontMatter>(): Config<FrontMatterType>;

interface Menu {
    menu: boolean;
    setMenu: Dispatch<SetStateAction<boolean>>;
}
declare const useMenu: () => Menu;

declare const useThemeConfig: () => {
    banner: {
        dismissible: boolean;
        key: string;
        content?: ReactNode | react.FC;
    };
    backgroundColor: {
        dark: string;
        light: string;
    };
    chat: {
        icon?: ReactNode | react.FC;
        link?: string | undefined;
    };
    darkMode: boolean;
    direction: "ltr" | "rtl";
    docsRepositoryBase: string;
    editLink: {
        component: react.FC<{
            children: ReactNode;
            className?: string;
            filePath?: string;
        }> | null;
        content?: ReactNode | react.FC;
    };
    feedback: {
        labels: string;
        useLink: (...args: unknown[]) => string;
        content?: ReactNode | react.FC;
    };
    footer: {
        content?: ReactNode | react.FC;
        component?: ReactNode | react.FC<{
            menu: boolean;
        }>;
    };
    i18n: {
        locale: string;
        name: string;
        direction?: "ltr" | "rtl" | undefined;
    }[];
    logoLink: string | boolean;
    navbar: {
        component?: ReactNode | react.FC<NavBarProps>;
        extraContent?: ReactNode | react.FC;
    };
    navigation: boolean | {
        next: boolean;
        prev: boolean;
    };
    nextThemes: {
        defaultTheme: string;
        storageKey: string;
        forcedTheme?: string | undefined;
    };
    notFound: {
        labels: string;
        content?: ReactNode | react.FC;
    };
    color: {
        hue: number | {
            dark: number;
            light: number;
        };
        saturation: number | {
            dark: number;
            light: number;
        };
    };
    project: {
        icon?: ReactNode | react.FC;
        link?: string | undefined;
    };
    search: {
        error: string | ((...args: unknown[]) => string);
        placeholder: string | ((...args: unknown[]) => string);
        component?: ReactNode | react.FC<{
            className?: string;
        }>;
        emptyResult?: ReactNode | react.FC;
        loading?: ReactNode | react.FC;
    };
    sidebar: {
        defaultMenuCollapseLevel: number;
        toggleButton: boolean;
        autoCollapse?: boolean | undefined;
    };
    themeSwitch: {
        useOptions: {
            dark: string;
            light: string;
            system: string;
        } | ((...args: unknown[]) => {
            dark: string;
            light: string;
            system: string;
        });
        component?: ReactNode | react.FC<{
            lite?: boolean;
            className?: string;
        }>;
    };
    toc: {
        float: boolean;
        component?: ReactNode | react.FC<TOCProps>;
        extraContent?: ReactNode | react.FC;
        backToTop?: ReactNode | react.FC;
        title?: ReactNode | react.FC;
    };
    components?: Record<string, react.FC> | undefined;
    faviconGlyph?: string | undefined;
    gitTimestamp?: ReactNode | react.FC<{
        timestamp: Date;
    }>;
    head?: ReactNode | react.FC;
    logo?: ReactNode | react.FC;
    main?: react.FC<{
        children: ReactNode;
    }> | undefined;
};

type AnchorProps = ComponentProps<'a'> & {
    newWindow?: boolean;
};

declare const Link: ({ href, className, ...props }: AnchorProps) => react_jsx_runtime.JSX.Element;
declare function getComponents({ isRawLayout, components }: {
    isRawLayout?: boolean;
    components?: DocsThemeConfig['components'];
}): MDXComponents;

declare function Bleed({ full, children }: {
    full: boolean;
    children: ReactNode;
}): ReactElement;

declare function Collapse({ children, isOpen, horizontal, openDuration, closeDuration }: {
    children: ReactNode;
    isOpen: boolean;
    horizontal?: boolean;
    openDuration?: number;
    closeDuration?: number;
}): ReactElement;

interface LocaleSwitchProps {
    lite?: boolean;
    className?: string;
}
declare function LocaleSwitch({ lite, className }: LocaleSwitchProps): ReactElement | null;

declare function NotFoundPage(): ReactElement | null;

declare const SkipNavLink: react.ForwardRefExoticComponent<Omit<react.DetailedHTMLProps<react.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, "children" | "ref" | "href"> & {
    label?: string;
    styled?: boolean;
} & react.RefAttributes<HTMLAnchorElement>>;
type SkipNavContentProps = Omit<ComponentProps<'div'>, 'ref' | 'children'>;
declare const SkipNavContent: react.ForwardRefExoticComponent<SkipNavContentProps & react.RefAttributes<HTMLDivElement>>;

type ThemeSwitchProps = {
    lite?: boolean;
    className?: string;
};
declare function ThemeSwitch({ lite, className }: ThemeSwitchProps): ReactElement;

declare function Layout({ children, themeConfig, pageOpts }: NextraThemeLayoutProps): ReactElement;

export { Bleed, Collapse, type PartialDocsThemeConfig as DocsThemeConfig, Link, LocaleSwitch, Navbar, NotFoundPage, SkipNavContent, SkipNavLink, ThemeSwitch, Layout as default, getComponents, useConfig, useMenu, useThemeConfig };
