import{_ as i,c as e,a1 as a,o as t}from"./chunks/framework.htKiKLP0.js";const k=JSON.parse('{"title":"Coding Conventions","description":"","frontmatter":{},"headers":[],"relativePath":"coding_conventions.md","filePath":"coding_conventions.md"}'),n={name:"coding_conventions.md"};function l(o,s,p,h,r,d){return t(),e("div",null,s[0]||(s[0]=[a(`<h1 id="coding-conventions" tabindex="-1">Coding Conventions <a class="header-anchor" href="#coding-conventions" aria-label="Permalink to &quot;Coding Conventions&quot;">​</a></h1><p>This page discusses coding conventions in all TypeScript files and the conventions used as part of our Git and GitHub workflow.</p><h2 id="git-and-github" tabindex="-1"><strong>Git And GitHub</strong> <a class="header-anchor" href="#git-and-github" aria-label="Permalink to &quot;**Git And GitHub**&quot;">​</a></h2><h3 id="commit-messages" tabindex="-1"><strong>Commit Messages</strong> <a class="header-anchor" href="#commit-messages" aria-label="Permalink to &quot;**Commit Messages**&quot;">​</a></h3><p>We follow <a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noreferrer">Conventional Commits</a> when writing commit messages. In short, the commit message should be in the following format:</p><div class="language-git vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">git</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;type&gt;[optional scope]: &lt;description&gt;</span></span></code></pre></div><p>The <code>type</code> must be one of the following:</p><ul><li><strong><code>feat</code></strong> for new features,</li><li><strong><code>fix</code></strong> for bug fixes,</li><li><strong><code>refactor</code></strong> for code changes that neither fixes a bug nor adds a feature,</li><li><strong><code>build</code></strong> for commits that modify dependencies or build scripts,</li><li><strong><code>style</code></strong> for commits that only modify the formatting of code,</li><li><strong><code>chore</code></strong> for any other changes that don&#39;t modify the functionality of the source code.</li></ul><p>Other less frequently used <code>type</code>s include <code>docs</code>, <code>ci</code>, <code>perf</code>, <code>test</code> and <code>revert</code>.</p><p>The <code>scope</code> is optional and can be used to specify the part of the codebase that the commit affects. For example, new features to the CMS will be prefixed with <code>feat(cms):</code>.</p><p>The <code>description</code> should be a short one-line summary of the changes made in the commit.</p><div class="info custom-block github-alert"><p class="custom-block-title">INFO</p><p><strong>The description must be written in the imperative mood, start in lowercase, and end <em>without</em> a period.</strong></p><p>For example, <code>feat: implement user sign-in</code> is a valid commit message. The following are not valid commit messages:</p><ul><li><code>feat: implemented user sign-in</code></li><li><code>feat: Implement user sign-in</code></li><li><code>feat: implement user sign-in.</code></li><li><code>Implement user sign-in</code></li><li><code>Implement some features</code> (too vague)</li></ul><p>If you are unsure whether a description is valid, read it with the sentence &quot;This commit will…&quot; followed by the description. If it sounds right, it is probably correct.</p></div><h3 id="pull-requests" tabindex="-1"><strong>Pull Requests</strong> <a class="header-anchor" href="#pull-requests" aria-label="Permalink to &quot;**Pull Requests**&quot;">​</a></h3><p>Pull request titles should follow the same format as commit messages.</p><p>You should also include a brief description of the changes made in the PR, and link to any relevant issues to be closed. If the PR is a work in progress, please include <code>(wip, don&#39;t merge)</code> as the scope in the title.</p><p>Screenshots to show the changes made are also appreciated.</p><div class="info custom-block github-alert"><p class="custom-block-title">INFO</p><p>Pull requests should be limited in scope as much as possible—only tangentially related changes should be included within the same PR.</p><p>For example, if you are working on a new feature, you should not include unrelated bug fixes in the same PR. Instead, create a separate branch and PR for them.</p></div><p>Each issue in the issue tracker has an issue number starting with a <code>#</code>. If your PR resolves an issue, please include <code>Resolves #&lt;issue number&gt;.</code> in the PR description to automatically close the issue when the PR is merged.</p><h2 id="typescript" tabindex="-1"><strong>TypeScript</strong> <a class="header-anchor" href="#typescript" aria-label="Permalink to &quot;**TypeScript**&quot;">​</a></h2><ul><li>We use 4 spaces for indentation.</li><li>Line lengths are limited to 120 characters, but this is not a hard limit.</li><li>Run <code>npm run format</code> to format your code before committing.</li></ul><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p><code>npm run format</code> will not automatically break lines in <code>className</code> props. You should insert line breaks manually.</p></div><ul><li>TypeScript files must end with <code>.ts</code> and React components and pages with <code>.tsx</code>.</li><li><code>.ts</code> filenames must be in <code>camelCase</code> and <code>.tsx</code> filenames in <code>PascalCase</code>.</li><li>The only exception to the above rule is for Next.js pages which must be named <code>index.tsx</code>.</li></ul><h3 id="tsx" tabindex="-1"><strong><code>.tsx</code></strong> <a class="header-anchor" href="#tsx" aria-label="Permalink to &quot;**\`.tsx\`**&quot;">​</a></h3><p>The following conventions apply to all React components in <code>.tsx</code> files.</p><ul><li>Declared types for the props of a component should be named <code>&lt;ComponentName&gt;Props</code> and located immediately above the component declaration.</li><li>Keep unrelated exported components in separate files.</li><li>Return types should be inferred where possible and not explicitly declared.</li><li>You can (and should) destructure props in the function signature if it will fit on one line.</li><li>TailwindCSS classes should be declared in the <code>className</code> prop, not <code>class</code>, as required by React.</li></ul><p>An example component:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    prop1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    prop2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">prop2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ...}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flex flex-col items-center justify-center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text-4xl font-bold&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{prop1}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> className</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text-xl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{prop2}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="index-tsx" tabindex="-1"><strong><code>index.tsx</code></strong> <a class="header-anchor" href="#index-tsx" aria-label="Permalink to &quot;**\`index.tsx\`**&quot;">​</a></h3><p>The following conventions apply to all Next.js pages in <code>index.tsx</code> files.</p><h3 id="using-getserversideprops-gssp-or-getstaticprops-gsp" tabindex="-1"><strong>Using <code>getServerSideProps</code> (gSSP) Or <code>getStaticProps</code> (gSP)</strong> <a class="header-anchor" href="#using-getserversideprops-gssp-or-getstaticprops-gsp" aria-label="Permalink to &quot;**Using \`getServerSideProps\` (gSSP) Or \`getStaticProps\` (gSP)**&quot;">​</a></h3><ul><li>If present, place the <code>getServerSideProps</code> or <code>getStaticProps</code> function at the top of the file, below the imports.</li><li>gSSP and gSP functions should be typed with <code>GetServerSideProps</code> and <code>GetStaticProps</code> respectively exported from <code>next</code>.</li><li>Place the type definition of the <code>props</code> returned by gSSP/gSP immediately below.</li><li>Alternatively, you can inline the type definition in the page&#39;s function signature with <code>NextPage&lt;Props&gt;</code>.</li></ul><p>An example page using gSSP:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { GetServerSideProps, NextPage } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;next&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PageProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getServerSideProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetServerSideProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PageProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  ctx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NextPage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PageProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><h3 id="not-using-gssp-gsp" tabindex="-1"><strong>Not Using gSSP/gSP</strong> <a class="header-anchor" href="#not-using-gssp-gsp" aria-label="Permalink to &quot;**Not Using gSSP/gSP**&quot;">​</a></h3><ul><li>Your page function signature should be <code>export default function Page()</code>.</li></ul><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Page</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,36)]))}const g=i(n,[["render",l]]);export{k as __pageData,g as default};
