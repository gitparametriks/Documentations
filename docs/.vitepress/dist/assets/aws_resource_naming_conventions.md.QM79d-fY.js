import{_ as t,c as o,a1 as a,o as n}from"./chunks/framework.htKiKLP0.js";const u=JSON.parse('{"title":"AWS Resource Naming Conventions","description":"","frontmatter":{},"headers":[],"relativePath":"aws_resource_naming_conventions.md","filePath":"aws_resource_naming_conventions.md"}'),r={name:"aws_resource_naming_conventions.md"};function i(d,e,l,s,c,p){return n(),o("div",null,e[0]||(e[0]=[a('<h1 id="aws-resource-naming-conventions" tabindex="-1">AWS Resource Naming Conventions <a class="header-anchor" href="#aws-resource-naming-conventions" aria-label="Permalink to &quot;AWS Resource Naming Conventions&quot;">​</a></h1><p>Establishing consistent naming conventions for AWS resources is essential for maintaining organization, governance, and ease of identification within cloud environments. This document provides a recommended AWS naming convention designed to improve standardization, facilitate efficient management, and promote maintainability across AWS environments.</p><h2 id="goals" tabindex="-1">Goals <a class="header-anchor" href="#goals" aria-label="Permalink to &quot;Goals&quot;">​</a></h2><p>An effective naming convention should:</p><ol><li>Follow a clear, well-defined schema that supports parsing and filtering.</li><li>Enable easy sorting and identification of resources.</li><li>Include key metadata like usage, environment, and location.</li><li>Conform to AWS-imposed constraints on character length and case.</li></ol><h2 id="general-format" tabindex="-1">General Format <a class="header-anchor" href="#general-format" aria-label="Permalink to &quot;General Format&quot;">​</a></h2><p>Our recommended format for AWS resource names is as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;prefix&gt;-&lt;usage&gt;-&lt;env&gt;-&lt;resource&gt;-&lt;location&gt;-&lt;description&gt;-&lt;suffix&gt;</span></span></code></pre></div><table><thead><tr><th><strong>Component</strong></th><th><strong>Description</strong></th><th><strong>Required</strong></th><th><strong>Constraints</strong></th></tr></thead><tbody><tr><td><strong>prefix</strong></td><td>Fixed prefix (e.g., company or department)</td><td>No</td><td><code>[a-z][a-z0-9]{3}</code></td></tr><tr><td><strong>usage</strong></td><td>Project, workload, application, or general usage</td><td>Yes</td><td><code>[a-z0-9]{4,10}</code></td></tr><tr><td><strong>env</strong></td><td>Environment (e.g., <code>dev</code>, <code>prod</code>, <code>stg</code>)</td><td>Yes</td><td><code>[a-z]{1,5}</code></td></tr><tr><td><strong>resource</strong></td><td>Resource type (e.g., <code>vpc</code>, <code>ec2</code>, <code>rds</code>)</td><td>Yes</td><td><code>[a-z0-9]{1,12}</code></td></tr><tr><td><strong>location</strong></td><td>Region + Availability Zone (e.g., <code>use1a</code>)</td><td>No</td><td><code>[a-z0-9]{1,5}</code></td></tr><tr><td><strong>description</strong></td><td>Optional description for clarification</td><td>No</td><td><code>[a-z0-9]{1,20}</code></td></tr><tr><td><strong>suffix</strong></td><td>Optional random suffix for uniqueness</td><td>No</td><td><code>[a-z0-9]{4}</code></td></tr></tbody></table><h2 id="naming-components" tabindex="-1">Naming Components <a class="header-anchor" href="#naming-components" aria-label="Permalink to &quot;Naming Components&quot;">​</a></h2><h3 id="_1-prefix-optional" tabindex="-1">1. Prefix (Optional) <a class="header-anchor" href="#_1-prefix-optional" aria-label="Permalink to &quot;1. Prefix (Optional)&quot;">​</a></h3><p>Use an abbreviated identifier for the company or department if needed.</p><ul><li><strong>Example</strong>: <code>avg-</code> for a fictional company, Average Inc.</li></ul><h3 id="_2-usage" tabindex="-1">2. Usage <a class="header-anchor" href="#_2-usage" aria-label="Permalink to &quot;2. Usage&quot;">​</a></h3><p>Identify the purpose, workload, or application served by the resource.</p><ul><li><strong>Examples</strong>: <code>ecommerce</code>, <code>shrsvcs</code>, <code>app</code></li></ul><h3 id="_3-environment" tabindex="-1">3. Environment <a class="header-anchor" href="#_3-environment" aria-label="Permalink to &quot;3. Environment&quot;">​</a></h3><p>Specify the environment with a short identifier.</p><ul><li><strong>Options</strong> include <code>dev</code>, <code>qas</code>, <code>prd</code> for a concise three-letter format, or <code>dev</code>, <code>test</code>, <code>prod</code> for more explicit naming.</li></ul><h3 id="_4-resource-type" tabindex="-1">4. Resource Type <a class="header-anchor" href="#_4-resource-type" aria-label="Permalink to &quot;4. Resource Type&quot;">​</a></h3><p>Use a short descriptor for the resource, matching AWS terminology as closely as possible.</p><ul><li><strong>Common examples</strong>: <ul><li><code>vpc</code> for Virtual Private Cloud</li><li><code>subnet</code> for Subnet</li><li><code>ec2</code> for EC2 Instances</li><li><code>rds</code> for Relational Database Service instances</li></ul></li></ul><h3 id="_5-location-optional" tabindex="-1">5. Location (Optional) <a class="header-anchor" href="#_5-location-optional" aria-label="Permalink to &quot;5. Location (Optional)&quot;">​</a></h3><p>Incorporate the region abbreviation and Availability Zone, if applicable.</p><ul><li>Use the Amazon S3 region abbreviations (e.g., <code>usw1a</code> for <code>us-west-1</code> Availability Zone <code>a</code>).</li></ul><h3 id="_6-description-optional" tabindex="-1">6. Description (Optional) <a class="header-anchor" href="#_6-description-optional" aria-label="Permalink to &quot;6. Description (Optional)&quot;">​</a></h3><p>Use this field for additional details that improve context and readability.</p><ul><li><strong>Examples</strong>: <code>primary</code>, <code>web</code>, <code>private</code></li></ul><h3 id="_7-suffix-optional" tabindex="-1">7. Suffix (Optional) <a class="header-anchor" href="#_7-suffix-optional" aria-label="Permalink to &quot;7. Suffix (Optional)&quot;">​</a></h3><p>Use a four-character suffix for uniqueness in case of naming conflicts, especially for resources requiring global uniqueness, like S3 buckets.</p><h2 id="aws-resource-naming-examples" tabindex="-1">AWS Resource Naming Examples <a class="header-anchor" href="#aws-resource-naming-examples" aria-label="Permalink to &quot;AWS Resource Naming Examples&quot;">​</a></h2><p>Below are examples of naming conventions for specific AWS services following this structure.</p><h3 id="iam" tabindex="-1">IAM <a class="header-anchor" href="#iam" aria-label="Permalink to &quot;IAM&quot;">​</a></h3><p>IAM resources often follow camel case or descriptive naming.</p><ul><li><p><strong>IAM Role</strong>: <code>&lt;usage&gt;-&lt;env&gt;-IAMRole-&lt;purpose&gt;</code></p><ul><li>Example: <code>ecommerce-prod-IAMRole-DataProcessing</code></li><li>Example: <code>shrsvcs-dev-IAMRole-EC2InstanceAccess</code></li></ul></li><li><p><strong>IAM Policy</strong>: <code>&lt;usage&gt;-&lt;env&gt;-IAMPolicy-&lt;purpose&gt;</code></p><ul><li>Example: <code>analytics-stg-IAMPolicy-S3Access</code></li><li>Example: <code>app-prod-IAMPolicy-DynamoDBFullAccess</code></li></ul></li></ul><h3 id="dynamodb" tabindex="-1">DynamoDB <a class="header-anchor" href="#dynamodb" aria-label="Permalink to &quot;DynamoDB&quot;">​</a></h3><p>For DynamoDB tables, the convention captures the table’s usage, environment, and purpose.</p><ul><li><strong>DynamoDB Table</strong>: <code>&lt;usage&gt;-&lt;env&gt;-dynamodb-&lt;description&gt;</code><ul><li>Example: <code>ecommerce-prod-dynamodb-orders</code></li><li>Example: <code>analytics-dev-dynamodb-userMetrics</code></li></ul></li></ul><h3 id="rds-relational-database-service" tabindex="-1">RDS (Relational Database Service) <a class="header-anchor" href="#rds-relational-database-service" aria-label="Permalink to &quot;RDS (Relational Database Service)&quot;">​</a></h3><p>RDS instance naming incorporates usage, environment, and database engine type.</p><ul><li><p><strong>RDS Instance</strong>: <code>&lt;usage&gt;-&lt;env&gt;-rds-&lt;engine&gt;-&lt;purpose&gt;</code></p><ul><li>Example: <code>app-stg-rds-mysql-userdata</code></li><li>Example: <code>hr-prod-rds-postgres-employeeRecords</code></li></ul></li><li><p><strong>RDS Cluster</strong>: <code>&lt;usage&gt;-&lt;env&gt;-rdscluster-&lt;engine&gt;-&lt;purpose&gt;</code></p><ul><li>Example: <code>ecommerce-prod-rdscluster-aurora-inventory</code></li><li>Example: <code>app-dev-rdscluster-postgres-sessionData</code></li></ul></li></ul><h3 id="lambda" tabindex="-1">Lambda <a class="header-anchor" href="#lambda" aria-label="Permalink to &quot;Lambda&quot;">​</a></h3><p>Lambda functions follow a format that includes usage, environment, and function purpose.</p><ul><li><strong>Lambda Function</strong>: <code>&lt;usage&gt;-&lt;env&gt;-lambda-&lt;purpose&gt;</code><ul><li>Example: <code>ecommerce-dev-lambda-processOrder</code></li><li>Example: <code>analytics-stg-lambda-aggregateData</code></li></ul></li></ul><h3 id="bedrock" tabindex="-1">Bedrock <a class="header-anchor" href="#bedrock" aria-label="Permalink to &quot;Bedrock&quot;">​</a></h3><p>AWS Bedrock-related naming conventions often include the model or project name.</p><ul><li><strong>Bedrock Model</strong>: <code>&lt;usage&gt;-&lt;env&gt;-bedrock-&lt;model&gt;-&lt;purpose&gt;</code><ul><li>Example: <code>nlp-prod-bedrock-gpt-customerInsights</code></li><li>Example: <code>ml-dev-bedrock-stable-diffusion-imageGen</code></li></ul></li></ul><h3 id="s3" tabindex="-1">S3 <a class="header-anchor" href="#s3" aria-label="Permalink to &quot;S3&quot;">​</a></h3><p>S3 bucket names must be globally unique. Using a company prefix and account ID (if necessary) is recommended.</p><ul><li><strong>S3 Bucket</strong>: <code>&lt;prefix&gt;-&lt;usage&gt;-&lt;env&gt;-s3-&lt;region&gt;-&lt;purpose&gt;-&lt;suffix&gt;</code><ul><li>Example: <code>avg-ecommerce-prod-s3-usw1-images-111111111111</code></li><li>Example: <code>hr-dev-s3-use1-employee-documents-222222222222</code></li></ul></li></ul><h3 id="api-gateway" tabindex="-1">API Gateway <a class="header-anchor" href="#api-gateway" aria-label="Permalink to &quot;API Gateway&quot;">​</a></h3><p>API Gateway naming follows usage and environment, and it may include a service or API type descriptor.</p><ul><li><strong>API Gateway</strong>: <code>&lt;usage&gt;-&lt;env&gt;-apigw-&lt;description&gt;</code><ul><li>Example: <code>payment-prod-apigw-orderService</code></li><li>Example: <code>social-dev-apigw-userProfile</code></li></ul></li></ul><h2 id="summary-table" tabindex="-1">Summary Table <a class="header-anchor" href="#summary-table" aria-label="Permalink to &quot;Summary Table&quot;">​</a></h2><table><thead><tr><th><strong>Service</strong></th><th><strong>Resource Type</strong></th><th><strong>Example Naming Convention</strong></th><th><strong>Example</strong></th></tr></thead><tbody><tr><td>IAM</td><td>Role</td><td><code>&lt;usage&gt;-&lt;env&gt;-IAMRole-&lt;purpose&gt;</code></td><td><code>ecommerce-prod-IAMRole-DataProcessing</code></td></tr><tr><td></td><td>Policy</td><td><code>&lt;usage&gt;-&lt;env&gt;-IAMPolicy-&lt;purpose&gt;</code></td><td><code>app-prod-IAMPolicy-DynamoDBFullAccess</code></td></tr><tr><td>DynamoDB</td><td>Table</td><td><code>&lt;usage&gt;-&lt;env&gt;-dynamodb-&lt;description&gt;</code></td><td><code>ecommerce-prod-dynamodb-orders</code></td></tr><tr><td>RDS</td><td>Instance</td><td><code>&lt;usage&gt;-&lt;env&gt;-rds-&lt;engine&gt;-&lt;purpose&gt;</code></td><td><code>hr-prod-rds-postgres-employeeRecords</code></td></tr><tr><td></td><td>Cluster</td><td><code>&lt;usage&gt;-&lt;env&gt;-rdscluster-&lt;engine&gt;-&lt;purpose&gt;</code></td><td><code>app-dev-rdscluster-postgres-sessionData</code></td></tr><tr><td>Lambda</td><td>Function</td><td><code>&lt;usage&gt;-&lt;env&gt;-lambda-&lt;purpose&gt;</code></td><td><code>analytics-stg-lambda-aggregateData</code></td></tr><tr><td>Bedrock</td><td>Model</td><td><code>&lt;usage&gt;-&lt;env&gt;-bedrock-&lt;model&gt;-&lt;purpose&gt;</code></td><td><code>nlp-prod-bedrock-gpt-customerInsights</code></td></tr><tr><td>S3</td><td>Bucket</td><td><code>&lt;prefix&gt;-&lt;usage&gt;-&lt;env&gt;-s3-&lt;region&gt;-&lt;purpose&gt;-&lt;suffix&gt;</code></td><td><code>avg-ecommerce-prod-s3-usw1-images-111111111111</code></td></tr><tr><td>API Gateway</td><td>Gateway</td><td><code>&lt;usage&gt;-&lt;env&gt;-apigw-&lt;description&gt;</code></td><td><code>payment-prod-apigw-orderService</code></td></tr></tbody></table><h2 id="special-cases" tabindex="-1">Special Cases <a class="header-anchor" href="#special-cases" aria-label="Permalink to &quot;Special Cases&quot;">​</a></h2><p>Certain AWS resources follow specific naming requirements that differ from the general convention:</p><ol><li><p><strong>IAM Resources</strong>:</p><ul><li>AWS commonly uses camel case with descriptive names for IAM roles and policies.</li><li><strong>Example</strong>: <code>IAMRoleForNetworkSecurity</code></li></ul></li><li><p><strong>CloudWatch Log Groups</strong>:</p><ul><li>CloudWatch uses a slash-separated naming pattern, e.g., <code>/aws/lambda/project-env-function</code>.</li><li><strong>Example</strong>: <code>/aws/clientvpn/networking-prod-clientvpn-cac1</code></li></ul></li><li><p><strong>S3 Buckets</strong>:</p><ul><li>S3 bucket names must be globally unique, so use a prefix and/or suffix that ensures this.</li><li><strong>Example</strong>: <code>avg-app-prod-s3-use1-assets-111111111111</code></li></ul></li></ol><h2 id="recommendations-for-terraform" tabindex="-1">Recommendations for Terraform <a class="header-anchor" href="#recommendations-for-terraform" aria-label="Permalink to &quot;Recommendations for Terraform&quot;">​</a></h2><p>Terraform’s <code>null label</code> module can help generate consistent names and tags across resources. This module is cloud-agnostic and can be customized to reflect our naming convention.</p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>This naming convention provides a structured, maintainable approach to naming AWS resources. By following this convention, you’ll ensure that resources are easily identifiable, well-organized, and efficiently managed. Any deviations from this convention should be documented, especially for unique requirements or legacy resources, to keep governance and documentation cohesive.</p>',62)]))}const m=t(r,[["render",i]]);export{u as __pageData,m as default};
